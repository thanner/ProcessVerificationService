@prefix : <http://www.scch.at/ontologies/bpmn20.owl> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix ext: <http://www.scch.at/ontologies/bpmn20.owl#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix xml: <http://www.w3.org/XML/1998/namespace> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix base: <http://www.scch.at/ontologies/bpmn20base.owl#> .
@prefix foaf: <http://xmlns.com/foaf/0.1/> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix swrl: <http://www.w3.org/2003/11/swrl#> .
@prefix swrlb: <http://www.w3.org/2003/11/swrlb#> .
@prefix dctype: <http://purl.org/dc/dcmitype/Image> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@base <http://www.scch.at/ontologies/bpmn20.owl> .

<http://www.scch.at/ontologies/bpmn20.owl> rdf:type owl:Ontology ;
                                            owl:imports <http://www.scch.at/ontologies/bpmn20base.owl> ;
                                            dc:description "Ontology describes the elements and syntax of BPMN 2.0" ;
                                            dc:date "18. August 2010" ;
                                            dc:creator "Christine Natschlaeger" ;
                                            dc:title "BPMN 2.0" .

#################################################################
#    Object Properties
#################################################################

###  http://www.scch.at/ontologies/bpmn20.owl#hasElement
ext:hasElement rdf:type owl:ObjectProperty ;
               rdfs:subPropertyOf owl:topObjectProperty ;
               owl:inverseOf ext:isElementOf ;
               rdfs:domain owl:Thing ;
               rdfs:range owl:Thing .


###  http://www.scch.at/ontologies/bpmn20.owl#hasEventMarker
ext:hasEventMarker rdf:type owl:ObjectProperty ;
                   rdfs:subPropertyOf owl:topObjectProperty ;
                   rdf:type owl:FunctionalProperty ;
                   rdfs:domain owl:Thing ;
                   rdfs:range ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#hasMarker
ext:hasMarker rdf:type owl:ObjectProperty ;
              rdfs:subPropertyOf owl:topObjectProperty ;
              rdfs:domain owl:Thing ;
              rdfs:range ext:MarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#hasResult
ext:hasResult rdf:type owl:ObjectProperty ;
              rdfs:subPropertyOf owl:topObjectProperty ;
              rdf:type owl:FunctionalProperty ;
              rdfs:domain owl:Thing ;
              rdfs:range ext:TransactionResultEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#incomingDataAssociation
ext:incomingDataAssociation rdf:type owl:ObjectProperty ;
                            rdfs:subPropertyOf owl:topObjectProperty ;
                            rdfs:domain owl:Thing ;
                            rdfs:range base:DataAssociation .


###  http://www.scch.at/ontologies/bpmn20.owl#incomingMsgFlow
ext:incomingMsgFlow rdf:type owl:ObjectProperty ;
                    rdfs:subPropertyOf owl:topObjectProperty ;
                    rdfs:domain owl:Thing ;
                    rdfs:range base:MessageFlow .


###  http://www.scch.at/ontologies/bpmn20.owl#isElementOf
ext:isElementOf rdf:type owl:ObjectProperty ;
                rdfs:subPropertyOf owl:topObjectProperty ;
                rdfs:domain owl:Thing ;
                rdfs:range owl:Thing .


###  http://www.scch.at/ontologies/bpmn20.owl#outgoingAssociation
ext:outgoingAssociation rdf:type owl:ObjectProperty ;
                        rdfs:subPropertyOf owl:topObjectProperty ;
                        rdfs:domain owl:Thing ;
                        rdfs:range base:Association .


###  http://www.scch.at/ontologies/bpmn20.owl#outgoingDataAssociation
ext:outgoingDataAssociation rdf:type owl:ObjectProperty ;
                            rdfs:subPropertyOf owl:topObjectProperty ;
                            rdfs:domain owl:Thing ;
                            rdfs:range base:DataAssociation .


###  http://www.scch.at/ontologies/bpmn20.owl#outgoingMsgFlow
ext:outgoingMsgFlow rdf:type owl:ObjectProperty ;
                    rdfs:subPropertyOf owl:topObjectProperty ;
                    rdfs:domain owl:Thing ;
                    rdfs:range base:MessageFlow .


###  http://www.scch.at/ontologies/bpmn20.owl#usedAs
ext:usedAs rdf:type owl:ObjectProperty ;
           rdfs:subPropertyOf owl:topObjectProperty ;
           rdfs:domain [ rdf:type owl:Class ;
                         owl:unionOf ( ext:CancelEvent
                                       ext:CompensationEvent
                                       ext:ConditionalEvent
                                       ext:ErrorEvent
                                       ext:EscalationEvent
                                       ext:LinkEvent
                                       ext:MessageEvent
                                       ext:MultipleEvent
                                       ext:NoneEvent
                                       ext:ParallelMultipleEvent
                                       ext:SignalEvent
                                       ext:TerminateEvent
                                       ext:TimerEvent
                                     )
                       ] ;
           rdfs:range [ rdf:type owl:Class ;
                        owl:unionOf ( base:CatchEvent
                                      base:ThrowEvent
                                    )
                      ] .


#################################################################
#    Data properties
#################################################################

###  http://www.scch.at/ontologies/bpmn20.owl#isAttachedToBoundary
ext:isAttachedToBoundary rdf:type owl:DatatypeProperty ;
                         rdfs:subPropertyOf owl:topDataProperty ;
                         rdf:type owl:FunctionalProperty ;
                         rdfs:domain [ rdf:type owl:Class ;
                                       owl:unionOf ( base:EndEvent
                                                     base:StartEvent
                                                   )
                                     ] .


#################################################################
#    Classes
#################################################################

###  http://www.scch.at/ontologies/bpmn20.owl#AbstractTask
ext:AbstractTask rdf:type owl:Class ;
                 rdfs:subClassOf base:Task ;
                 base:bpmnSpecification """A Task which is not further specified is called Abstract Task (this was referred to as the None Task in BPMN 1.2). The notation of the Abstract
Task is shown in Figure 10.8.""" .


###  http://www.scch.at/ontologies/bpmn20.owl#AdHocMarker
ext:AdHocMarker rdf:type owl:Class ;
                rdfs:subClassOf ext:MarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#CancelEvent
ext:CancelEvent rdf:type owl:Class ;
                owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                           [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitionRefs ;
                                                                                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                  [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitions ;
                                                                                                    owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                ) ;
                                                                             rdf:type owl:Class
                                                                           ]
                                                                           [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitionRefs ;
                                                                                                    owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                  [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitions ;
                                                                                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                ) ;
                                                                             rdf:type owl:Class
                                                                           ]
                                                                         )
                                                           ]
                                                           [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitionRefs ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:CancelEventDefinition
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitions ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:CancelEventDefinition
                                                                           ]
                                                                         )
                                                           ]
                                                         ) ;
                                      rdf:type owl:Class
                                    ] ,
                                    [ owl:intersectionOf ( base:Event
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         ) ;
                                      rdf:type owl:Class
                                    ] ;
                rdfs:subClassOf base:Event ,
                                [ rdf:type owl:Class ;
                                  owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitionRefs ;
                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitions ;
                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ]
                                                [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitionRefs ;
                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitions ;
                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Class ;
                                  owl:unionOf ( [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:eventDefinitionRefs ;
                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:CancelEventDefinition
                                                ]
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:eventDefinitions ;
                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:CancelEventDefinition
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasEventMarker ;
                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:CancelEventMarker
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:incomingMsgFlow ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:MessageFlow
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:outgoingMsgFlow ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:MessageFlow
                                ] ;
                base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:CancelEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:CancelEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CancelEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.74 shows the variations of Cancel Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:CancelEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:CancelEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "The types of Event Definitions are: CancelEventDefinition, ..."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CancelEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.74 shows the variations of Cancel Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CancelEventInterrupting
ext:CancelEventInterrupting rdf:type owl:Class ;
                            owl:equivalentClass [ owl:intersectionOf ( ext:CancelEvent
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:isInterrupting ;
                                                                         owl:hasValue "true"^^xsd:boolean
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ] ;
                            rdfs:subClassOf ext:CancelEvent ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:usedAs ;
                                              owl:allValuesFrom [ rdf:type owl:Class ;
                                                                  owl:unionOf ( base:BoundaryEvent
                                                                                base:EndEvent
                                                                              )
                                                                ]
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty base:isInterrupting ;
                                              owl:hasValue "true"^^xsd:boolean
                                            ] ;
                            base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:CancelEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """Note that a Cancel Event always interrupts the Activity to which it is
attached, i.e., there is not a non-interrupting version of this Event."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:BoundaryEvent
                                                           base:EndEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Table 10.93 – Types of Events and their Markers

Cancel Events are only used in the context of modeling Transaction Sub-Processes (see page 178 for more details on Transactions). There are two variations: a catch Intermediate Event and an End Event.
* The catch Cancel Intermediate Event MUST only be attached to the boundary of a Transaction Sub-Process and, thus, MAY NOT be used in normal flow.
* The Cancel End Event MUST only be used within a Transaction Sub-Process and, thus, MAY NOT be used in any other type of Sub-Process or Process."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CancelEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """Note that a Cancel Event always interrupts the Activity to which it is
attached, i.e., there is not a non-interrupting version of this Event."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CancelEventMarker
ext:CancelEventMarker rdf:type owl:Class ;
                      rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#CollapsedMarker
ext:CollapsedMarker rdf:type owl:Class ;
                    rdfs:subClassOf ext:MarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#CollapsedSubChoreography
ext:CollapsedSubChoreography rdf:type owl:Class ;
                             owl:equivalentClass [ owl:intersectionOf ( base:SubChoreography
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty ext:hasMarker ;
                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                          owl:onClass ext:CollapsedMarker
                                                                        ]
                                                                      ) ;
                                                   rdf:type owl:Class
                                                 ] ;
                             rdfs:subClassOf base:SubChoreography ,
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty ext:hasMarker ;
                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                               owl:onClass ext:CollapsedMarker
                                             ] ;
                             owl:disjointWith ext:ExpandedSubChoreography ;
                             base:bpmnSpecification "The Sub-Choreography can be in a collapsed view that hides its details (see Figure 11.17) or a Sub-Choreography can be expanded to show its details (a Choreography Process) within the Choreography Process in which it is contained (see Figure 11.19). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub- Choreography, rather than a Choreography Task." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CollapsedSubChoreography ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubChoreography
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CollapsedMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "The Sub-Choreography can be in a collapsed view that hides its details (see Figure 11.17) or a Sub-Choreography can be expanded to show its details (a Choreography Process) within the Choreography Process in which it is contained (see Figure 11.19). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub- Choreography, rather than a Choreography Task."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CollapsedSubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification "In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Choreography, rather than a Choreography Task."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CollapsedSubConversation
ext:CollapsedSubConversation rdf:type owl:Class ;
                             owl:equivalentClass [ owl:intersectionOf ( base:SubConversation
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty ext:hasMarker ;
                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                          owl:onClass ext:CollapsedMarker
                                                                        ]
                                                                      ) ;
                                                   rdf:type owl:Class
                                                 ] ;
                             rdfs:subClassOf base:SubConversation ,
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty ext:hasMarker ;
                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                               owl:onClass ext:CollapsedMarker
                                             ] ;
                             owl:disjointWith ext:ExpandedSubConversation .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CollapsedSubConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification """The Sub- Conversation marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape.

A Sub-Conversation is a graphical object within a Collaboration, but it also can be “opened up” to show the lowerlevel details of the Conversation, which consist of Message Flows, Conversations, and/or other Sub-Conversations."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CollapsedSubConversation ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubConversation
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CollapsedMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """The Sub- Conversation marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape.

A Sub-Conversation is a graphical object within a Collaboration, but it also can be “opened up” to show the lowerlevel details of the Conversation, which consist of Message Flows, Conversations, and/or other Sub-Conversations."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CollapsedSubProcess
ext:CollapsedSubProcess rdf:type owl:Class ;
                        owl:equivalentClass [ owl:intersectionOf ( base:SubProcess
                                                                   [ rdf:type owl:Restriction ;
                                                                     owl:onProperty ext:hasMarker ;
                                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                     owl:onClass ext:CollapsedMarker
                                                                   ]
                                                                 ) ;
                                              rdf:type owl:Class
                                            ] ;
                        rdfs:subClassOf base:SubProcess ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty ext:hasMarker ;
                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                          owl:onClass ext:CollapsedMarker
                                        ] ;
                        owl:disjointWith ext:ExpandedSubProcess ;
                        base:bpmnSpecification """The Sub-Process can be in a collapsed view that hides its details (see Figure 10.25) or a Sub-Process can be in an
expanded view that shows its details within the view of the Process in which it is contained (see Figure 10.26). In the
collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Process, rather than a Task.""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CollapsedSubProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubProcess
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CollapsedMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """The Sub-Process can be in a collapsed view that hides its details (see Figure 10.25) or a Sub-Process can be in an expanded view that shows its details within the view of the Process in which it is contained (see Figure 10.26). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Process, rather than a Task.
* The Sub-Process marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CollapsedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification """The Sub-Process can be in a collapsed view that hides its details (see Figure 10.25) or a Sub-Process can be in an expanded view that shows its details within the view of the Process in which it is contained (see Figure 10.26). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Process, rather than a Task.
* The Sub-Process marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CompensationEvent
ext:CompensationEvent rdf:type owl:Class ;
                      owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                                 [ rdf:type owl:Class ;
                                                                   owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                          owl:onProperty base:eventDefinitionRefs ;
                                                                                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                          owl:onClass base:EventDefinition
                                                                                                        ]
                                                                                                        [ rdf:type owl:Restriction ;
                                                                                                          owl:onProperty base:eventDefinitions ;
                                                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                          owl:onClass base:EventDefinition
                                                                                                        ]
                                                                                                      ) ;
                                                                                   rdf:type owl:Class
                                                                                 ]
                                                                                 [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                          owl:onProperty base:eventDefinitionRefs ;
                                                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                          owl:onClass base:EventDefinition
                                                                                                        ]
                                                                                                        [ rdf:type owl:Restriction ;
                                                                                                          owl:onProperty base:eventDefinitions ;
                                                                                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                          owl:onClass base:EventDefinition
                                                                                                        ]
                                                                                                      ) ;
                                                                                   rdf:type owl:Class
                                                                                 ]
                                                                               )
                                                                 ]
                                                                 [ rdf:type owl:Class ;
                                                                   owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:eventDefinitionRefs ;
                                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                   owl:onClass base:CompensationEventDefinition
                                                                                 ]
                                                                                 [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:eventDefinitions ;
                                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                   owl:onClass base:CompensationEventDefinition
                                                                                 ]
                                                                               )
                                                                 ]
                                                               ) ;
                                            rdf:type owl:Class
                                          ] ,
                                          [ owl:intersectionOf ( base:Event
                                                                 [ rdf:type owl:Restriction ;
                                                                   owl:onProperty ext:hasEventMarker ;
                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                   owl:onClass ext:CompensationEventMarker
                                                                 ]
                                                               ) ;
                                            rdf:type owl:Class
                                          ] ;
                      rdfs:subClassOf base:Event ,
                                      [ rdf:type owl:Class ;
                                        owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                               owl:onProperty base:eventDefinitionRefs ;
                                                                               owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                               owl:onClass base:EventDefinition
                                                                             ]
                                                                             [ rdf:type owl:Restriction ;
                                                                               owl:onProperty base:eventDefinitions ;
                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                               owl:onClass base:EventDefinition
                                                                             ]
                                                                           ) ;
                                                        rdf:type owl:Class
                                                      ]
                                                      [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                               owl:onProperty base:eventDefinitionRefs ;
                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                               owl:onClass base:EventDefinition
                                                                             ]
                                                                             [ rdf:type owl:Restriction ;
                                                                               owl:onProperty base:eventDefinitions ;
                                                                               owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                               owl:onClass base:EventDefinition
                                                                             ]
                                                                           ) ;
                                                        rdf:type owl:Class
                                                      ]
                                                    )
                                      ] ,
                                      [ rdf:type owl:Class ;
                                        owl:unionOf ( [ rdf:type owl:Restriction ;
                                                        owl:onProperty base:eventDefinitionRefs ;
                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                        owl:onClass base:CompensationEventDefinition
                                                      ]
                                                      [ rdf:type owl:Restriction ;
                                                        owl:onProperty base:eventDefinitions ;
                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                        owl:onClass base:CompensationEventDefinition
                                                      ]
                                                    )
                                      ] ,
                                      [ rdf:type owl:Restriction ;
                                        owl:onProperty ext:hasEventMarker ;
                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                        owl:onClass ext:CompensationEventMarker
                                      ] ,
                                      [ rdf:type owl:Restriction ;
                                        owl:onProperty ext:incomingMsgFlow ;
                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                        owl:onClass base:MessageFlow
                                      ] ,
                                      [ rdf:type owl:Restriction ;
                                        owl:onProperty ext:outgoingMsgFlow ;
                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                        owl:onClass base:MessageFlow
                                      ] ;
                      base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:CompensationEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:CompensationEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "If there is only one (1) EventDefinition associated with the Start Event and that EventDefinition is of the subclass CompensationEventDefinition, then the Event is a Compensation Start Event and uses a double triangle marker (see the figure to the right)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CompensationEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.75 shows the variations of Compensation Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "If there is only one EventDefinition associated with the Start Event and that EventDefinition is of the subclass CompensationEventDefinition, then the Event is a Compensation Start Event and uses a double triangle marker (see the figure to the right)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:CompensationEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:CompensationEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "If there is only one EventDefinition associated with the Start Event and that EventDefinition is of the subclass CompensationEventDefinition, then the Event is a Compensation Start Event and uses a double triangle marker (see the figure to the right)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CompensationEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.75 shows the variations of Compensation Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CompensationEventInterrupting
ext:CompensationEventInterrupting rdf:type owl:Class ;
                                  owl:equivalentClass [ owl:intersectionOf ( ext:CompensationEvent
                                                                             [ rdf:type owl:Restriction ;
                                                                               owl:onProperty base:isInterrupting ;
                                                                               owl:hasValue "true"^^xsd:boolean
                                                                             ]
                                                                           ) ;
                                                        rdf:type owl:Class
                                                      ] ;
                                  rdfs:subClassOf ext:CompensationEvent ,
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty ext:usedAs ;
                                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                                        owl:unionOf ( ext:StartEventEventSubProcess
                                                                                      base:BoundaryEvent
                                                                                      base:EndEvent
                                                                                      base:IntermediateThrowEvent
                                                                                    )
                                                                      ]
                                                  ] ,
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty base:isInterrupting ;
                                                    owl:hasValue "true"^^xsd:boolean
                                                  ] ;
                                  base:bpmnSpecification """Compensation Event: 
This Event does not interrupt the Process since the Process has to be completed before this Event can be triggered.""" ,
                                                         "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:CompensationEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """Note that the interrupting a non-interrupting aspect of other Events does not apply in the case of a Compensation Event. Compensations can only be triggered after completion of the Activity to which they are
attached. Thus they cannot interrupt the Activity. The boundary of the
Event is always solid."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                           base:EndEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Table 10.93 – Types of Events and their Markers

Compensation Events are used in the context of triggering or handling compensation (see page 302 for more details on
compensation). There are four variations: a Start Event, both a catch and throw Intermediate Event, and an End
Event.
* The Compensation Start Event MAY NOT be used for a top-level Process.
* The Compensation Start Event MAY be used for an Event Sub-Process.
* The catch Compensation Intermediate Event MUST only be attached to the boundary of an Activity and, thus, MAY NOT be used in normal flow.
* The throw Compensation Intermediate Event MAY be used in normal flow.
* The Compensation End Event MAY be used within any Sub-Process or Process.
"""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:CompensationEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """Note that the interrupting a non-interrupting aspect of other Events does not apply in the case of a Compensation Event. Compensations can only be triggered after completion of the Activity to which they are
attached. Thus they cannot interrupt the Activity. The boundary of the
Event is always solid."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#CompensationEventMarker
ext:CompensationEventMarker rdf:type owl:Class ;
                            rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#CompensationMarker
ext:CompensationMarker rdf:type owl:Class ;
                       rdfs:subClassOf ext:MarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#ConditionalEvent
ext:ConditionalEvent rdf:type owl:Class ;
                     owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                                [ rdf:type owl:Class ;
                                                                  owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                         owl:onProperty base:eventDefinitionRefs ;
                                                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                         owl:onClass base:EventDefinition
                                                                                                       ]
                                                                                                       [ rdf:type owl:Restriction ;
                                                                                                         owl:onProperty base:eventDefinitions ;
                                                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                         owl:onClass base:EventDefinition
                                                                                                       ]
                                                                                                     ) ;
                                                                                  rdf:type owl:Class
                                                                                ]
                                                                                [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                         owl:onProperty base:eventDefinitionRefs ;
                                                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                         owl:onClass base:EventDefinition
                                                                                                       ]
                                                                                                       [ rdf:type owl:Restriction ;
                                                                                                         owl:onProperty base:eventDefinitions ;
                                                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                         owl:onClass base:EventDefinition
                                                                                                       ]
                                                                                                     ) ;
                                                                                  rdf:type owl:Class
                                                                                ]
                                                                              )
                                                                ]
                                                                [ rdf:type owl:Class ;
                                                                  owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                                  owl:onProperty base:eventDefinitionRefs ;
                                                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                  owl:onClass base:ConditionalEventDefinition
                                                                                ]
                                                                                [ rdf:type owl:Restriction ;
                                                                                  owl:onProperty base:eventDefinitions ;
                                                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                  owl:onClass base:ConditionalEventDefinition
                                                                                ]
                                                                              )
                                                                ]
                                                              ) ;
                                           rdf:type owl:Class
                                         ] ,
                                         [ owl:intersectionOf ( base:Event
                                                                [ rdf:type owl:Restriction ;
                                                                  owl:onProperty ext:hasEventMarker ;
                                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                  owl:onClass ext:ConditionalEventMarker
                                                                ]
                                                              ) ;
                                           rdf:type owl:Class
                                         ] ;
                     rdfs:subClassOf base:Event ,
                                     [ rdf:type owl:Class ;
                                       owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:eventDefinitionRefs ;
                                                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                              owl:onClass base:EventDefinition
                                                                            ]
                                                                            [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:eventDefinitions ;
                                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                              owl:onClass base:EventDefinition
                                                                            ]
                                                                          ) ;
                                                       rdf:type owl:Class
                                                     ]
                                                     [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:eventDefinitionRefs ;
                                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                              owl:onClass base:EventDefinition
                                                                            ]
                                                                            [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:eventDefinitions ;
                                                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                              owl:onClass base:EventDefinition
                                                                            ]
                                                                          ) ;
                                                       rdf:type owl:Class
                                                     ]
                                                   )
                                     ] ,
                                     [ rdf:type owl:Class ;
                                       owl:unionOf ( [ rdf:type owl:Restriction ;
                                                       owl:onProperty base:eventDefinitionRefs ;
                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                       owl:onClass base:ConditionalEventDefinition
                                                     ]
                                                     [ rdf:type owl:Restriction ;
                                                       owl:onProperty base:eventDefinitions ;
                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                       owl:onClass base:ConditionalEventDefinition
                                                     ]
                                                   )
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasEventMarker ;
                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                       owl:onClass ext:ConditionalEventMarker
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:incomingMsgFlow ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:MessageFlow
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:outgoingMsgFlow ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:MessageFlow
                                     ] ;
                     base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:ConditionalEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:ConditionalEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is only one (1) EventDefinition associated with the Start
Event and that EventDefinition is of the subclass ConditionalEventDefinition, then the Event is a Conditional Start Event and MUST be displayed with a lined paper marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:ConditionalEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.77 shows the variations of Conditional Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass ConditionalEventDefinition, then the Event is a Conditional Start Event and MUST be displayed with a lined paper marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ConditionalEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ConditionalEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass ConditionalEventDefinition, then the Event is a Conditional Start Event and MUST be displayed with a lined paper marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:ConditionalEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.77 shows the variations of Conditional Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ConditionalEventInterrupting
ext:ConditionalEventInterrupting rdf:type owl:Class ;
                                 owl:equivalentClass [ owl:intersectionOf ( ext:ConditionalEvent
                                                                            [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:isInterrupting ;
                                                                              owl:hasValue "true"^^xsd:boolean
                                                                            ]
                                                                          ) ;
                                                       rdf:type owl:Class
                                                     ] ;
                                 rdfs:subClassOf ext:ConditionalEvent ,
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty ext:usedAs ;
                                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                                       owl:unionOf ( ext:StartEventEventSubProcess
                                                                                     ext:StartEventNotEventSubProcess
                                                                                     base:BoundaryEvent
                                                                                     base:IntermediateCatchEvent
                                                                                   )
                                                                     ]
                                                 ] ,
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:isInterrupting ;
                                                   owl:hasValue "true"^^xsd:boolean
                                                 ] ;
                                 owl:disjointWith ext:ConditionalEventNonInterrupting ;
                                 base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:ConditionalEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Conditional Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Conditional Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           ext:StartEventNotEventSubProcess
                                                           base:BoundaryEvent
                                                           base:IntermediateCatchEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Conditional Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Conditional Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ConditionalEventMarker
ext:ConditionalEventMarker rdf:type owl:Class ;
                           rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#ConditionalEventNonInterrupting
ext:ConditionalEventNonInterrupting rdf:type owl:Class ;
                                    owl:equivalentClass [ owl:intersectionOf ( ext:ConditionalEvent
                                                                               [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty base:isInterrupting ;
                                                                                 owl:hasValue "false"^^xsd:boolean
                                                                               ]
                                                                             ) ;
                                                          rdf:type owl:Class
                                                        ] ;
                                    rdfs:subClassOf ext:ConditionalEvent ,
                                                    [ rdf:type owl:Restriction ;
                                                      owl:onProperty ext:usedAs ;
                                                      owl:allValuesFrom [ rdf:type owl:Class ;
                                                                          owl:unionOf ( ext:StartEventEventSubProcess
                                                                                        base:BoundaryEvent
                                                                                      )
                                                                        ]
                                                    ] ,
                                                    [ rdf:type owl:Restriction ;
                                                      owl:onProperty base:isInterrupting ;
                                                      owl:hasValue "false"^^xsd:boolean
                                                    ] ;
                                    base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:ConditionalEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Conditional Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Conditional Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ConditionalEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Conditional Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Conditional Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#EmbeddedSubProcess
ext:EmbeddedSubProcess rdf:type owl:Class ;
                       rdfs:subClassOf base:SubProcess ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasElement ;
                                         owl:allValuesFrom [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                                             owl:complementOf base:BoundaryEvent
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty ext:hasEventMarker ;
                                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass ext:CancelEventMarker
                                                                           ]
                                                                         )
                                                           ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasElement ;
                                         owl:allValuesFrom [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                                             owl:complementOf base:EndEvent
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty ext:hasEventMarker ;
                                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass ext:CancelEventMarker
                                                                           ]
                                                                         )
                                                           ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasElement ;
                                         owl:allValuesFrom [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                                             owl:complementOf base:StartEvent
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty ext:hasEventMarker ;
                                                                             owl:allValuesFrom ext:NoneEventMarker
                                                                           ]
                                                                         )
                                                           ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasElement ;
                                         owl:allValuesFrom [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                                             owl:complementOf base:StartEvent
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:isInterrupting ;
                                                                             owl:hasValue "true"^^xsd:boolean
                                                                           ]
                                                                         )
                                                           ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:triggeredByEvent ;
                                         owl:hasValue "false"^^xsd:boolean
                                       ] ;
                       base:bpmnSpecification """There are different types of Sub-Processes, which will be described in the next five (5) sections:
Embedded Sub-Process (Sub-Process)
....""" ;
                       rdfs:comment "The classes EmbeddedSubProcess and EventSubProcess are defined as subclasses of SubProcess for several reasons, which are described in more detail in the paper." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EmbeddedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:BoundaryEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "The Cancel Intermediate Event can only be used when attached to the boundary of a Transaction Sub-Process. It cannot be used in any normal flow and cannot be attached to a non-Transaction Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EmbeddedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:EndEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Cancel: This type of End is used within a Transaction Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EmbeddedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom ext:NoneEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "There is only one type of Start Event for Sub-Processes in BPMN (see Figure 10.82): None."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EmbeddedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:isInterrupting ;
                                                             owl:hasValue "true"^^xsd:boolean
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Start Event attributes isInterrupting:
This attribute only applies to Start Events of Event Sub-Processes; it is ignored for other Start Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EmbeddedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:triggeredByEvent ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """A flag that identifies whether this Sub-Process is an Event Sub-Process.
• If false, then this Sub-Process is a normal Sub-Process.
• If true, then this Sub-Process is an Event Sub-Process and is
subject to additional constraints (see page 176)."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ErrorEvent
ext:ErrorEvent rdf:type owl:Class ;
               owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                          [ rdf:type owl:Class ;
                                                            owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitionRefs ;
                                                                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                                 [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitions ;
                                                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                               ) ;
                                                                            rdf:type owl:Class
                                                                          ]
                                                                          [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitionRefs ;
                                                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                                 [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitions ;
                                                                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                               ) ;
                                                                            rdf:type owl:Class
                                                                          ]
                                                                        )
                                                          ]
                                                          [ rdf:type owl:Class ;
                                                            owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitionRefs ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:ErrorEventDefinition
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitions ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:ErrorEventDefinition
                                                                          ]
                                                                        )
                                                          ]
                                                        ) ;
                                     rdf:type owl:Class
                                   ] ,
                                   [ owl:intersectionOf ( base:Event
                                                          [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:ErrorEventMarker
                                                          ]
                                                        ) ;
                                     rdf:type owl:Class
                                   ] ;
               rdfs:subClassOf base:Event ,
                               [ rdf:type owl:Class ;
                                 owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitionRefs ;
                                                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitions ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                    ) ;
                                                 rdf:type owl:Class
                                               ]
                                               [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitionRefs ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitions ;
                                                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                    ) ;
                                                 rdf:type owl:Class
                                               ]
                                             )
                               ] ,
                               [ rdf:type owl:Class ;
                                 owl:unionOf ( [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:eventDefinitionRefs ;
                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:ErrorEventDefinition
                                               ]
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:eventDefinitions ;
                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:ErrorEventDefinition
                                               ]
                                             )
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:hasEventMarker ;
                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                 owl:onClass ext:ErrorEventMarker
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:incomingMsgFlow ;
                                 owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                 owl:onClass base:MessageFlow
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:outgoingMsgFlow ;
                                 owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                 owl:onClass base:MessageFlow
                               ] ;
               base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:ErrorEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:ErrorEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is only one (1) EventDefinition associated with the Start Event and that EventDefinition is of the subclass ErrorEventDefinition, then the
Event is an Error Start Event and uses a lightning marker (see the figures to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:ErrorEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.79 – Error Events"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start Event and that EventDefinition is of the subclass ErrorEventDefinition, then the
Event is an Error Start Event and uses a lightning marker (see the figures to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ErrorEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ErrorEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start Event and that EventDefinition is of the subclass ErrorEventDefinition, then the
Event is an Error Start Event and uses a lightning marker (see the figures to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:ErrorEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.79 – Error Events"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ErrorEventInterrupting
ext:ErrorEventInterrupting rdf:type owl:Class ;
                           owl:equivalentClass [ owl:intersectionOf ( ext:ErrorEvent
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:isInterrupting ;
                                                                        owl:hasValue "true"^^xsd:boolean
                                                                      ]
                                                                    ) ;
                                                 rdf:type owl:Class
                                               ] ;
                           rdfs:subClassOf ext:ErrorEvent ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:usedAs ;
                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                 owl:unionOf ( ext:StartEventEventSubProcess
                                                                               base:BoundaryEvent
                                                                               base:EndEvent
                                                                             )
                                                               ]
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty base:isInterrupting ;
                                             owl:hasValue "true"^^xsd:boolean
                                           ] ;
                           base:bpmnSpecification "Given the nature of Errors, an Event Sub-Process with an Error trigger will always interrupt its containing Process." ,
                                                  "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:ErrorEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """Note that an Error Event always interrupts the Activity to which it is
attached, i.e., there is not a non-interrupting version of this Event. The
boundary of the Event thus always solid (see figure on the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                           base:EndEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ErrorEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """Note that an Error Event always interrupts the Activity to which it is
attached, i.e., there is not a non-interrupting version of this Event. The
boundary of the Event thus always solid (see figure on the right)."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ErrorEventMarker
ext:ErrorEventMarker rdf:type owl:Class ;
                     rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#EscalationEvent
ext:EscalationEvent rdf:type owl:Class ;
                    owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                               [ rdf:type owl:Class ;
                                                                 owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                        owl:onProperty base:eventDefinitionRefs ;
                                                                                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                        owl:onClass base:EventDefinition
                                                                                                      ]
                                                                                                      [ rdf:type owl:Restriction ;
                                                                                                        owl:onProperty base:eventDefinitions ;
                                                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                        owl:onClass base:EventDefinition
                                                                                                      ]
                                                                                                    ) ;
                                                                                 rdf:type owl:Class
                                                                               ]
                                                                               [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                        owl:onProperty base:eventDefinitionRefs ;
                                                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                        owl:onClass base:EventDefinition
                                                                                                      ]
                                                                                                      [ rdf:type owl:Restriction ;
                                                                                                        owl:onProperty base:eventDefinitions ;
                                                                                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                        owl:onClass base:EventDefinition
                                                                                                      ]
                                                                                                    ) ;
                                                                                 rdf:type owl:Class
                                                                               ]
                                                                             )
                                                               ]
                                                               [ rdf:type owl:Class ;
                                                                 owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty base:eventDefinitionRefs ;
                                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                 owl:onClass base:EscalationEventDefinition
                                                                               ]
                                                                               [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty base:eventDefinitions ;
                                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                 owl:onClass base:EscalationEventDefinition
                                                                               ]
                                                                             )
                                                               ]
                                                             ) ;
                                          rdf:type owl:Class
                                        ] ,
                                        [ owl:intersectionOf ( base:Event
                                                               [ rdf:type owl:Restriction ;
                                                                 owl:onProperty ext:hasEventMarker ;
                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                 owl:onClass ext:EscalationEventMarker
                                                               ]
                                                             ) ;
                                          rdf:type owl:Class
                                        ] ;
                    rdfs:subClassOf base:Event ,
                                    [ rdf:type owl:Class ;
                                      owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitionRefs ;
                                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:EventDefinition
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitions ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:EventDefinition
                                                                           ]
                                                                         ) ;
                                                      rdf:type owl:Class
                                                    ]
                                                    [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitionRefs ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:EventDefinition
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitions ;
                                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:EventDefinition
                                                                           ]
                                                                         ) ;
                                                      rdf:type owl:Class
                                                    ]
                                                  )
                                    ] ,
                                    [ rdf:type owl:Class ;
                                      owl:unionOf ( [ rdf:type owl:Restriction ;
                                                      owl:onProperty base:eventDefinitionRefs ;
                                                      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                      owl:onClass base:EscalationEventDefinition
                                                    ]
                                                    [ rdf:type owl:Restriction ;
                                                      owl:onProperty base:eventDefinitions ;
                                                      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                      owl:onClass base:EscalationEventDefinition
                                                    ]
                                                  )
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:hasEventMarker ;
                                      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                      owl:onClass ext:EscalationEventMarker
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:incomingMsgFlow ;
                                      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:MessageFlow
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:outgoingMsgFlow ;
                                      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:MessageFlow
                                    ] ;
                    base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EscalationEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EscalationEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is only one (1) EventDefinition associated with the Start Event and that EventDefinition is of the subclass EscalationEventDefinition,
then the Event is an Escalation Start Event and uses an arrowhead marker (see the figures to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:EscalationEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.81 shows the variations of Escalation Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start Event and that EventDefinition is of the subclass EscalationEventDefinition,
then the Event is an Escalation Start Event and uses an arrowhead marker (see the figures to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:EscalationEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:EscalationEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start Event and that EventDefinition is of the subclass EscalationEventDefinition,
then the Event is an Escalation Start Event and uses an arrowhead marker (see the figures to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:EscalationEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.81 shows the variations of Escalation Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#EscalationEventInterrupting
ext:EscalationEventInterrupting rdf:type owl:Class ;
                                owl:equivalentClass [ owl:intersectionOf ( ext:EscalationEvent
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:isInterrupting ;
                                                                             owl:hasValue "true"^^xsd:boolean
                                                                           ]
                                                                         ) ;
                                                      rdf:type owl:Class
                                                    ] ;
                                rdfs:subClassOf ext:EscalationEvent ,
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty ext:usedAs ;
                                                  owl:allValuesFrom [ rdf:type owl:Class ;
                                                                      owl:unionOf ( ext:StartEventEventSubProcess
                                                                                    base:BoundaryEvent
                                                                                    base:EndEvent
                                                                                    base:IntermediateThrowEvent
                                                                                  )
                                                                    ]
                                                ] ,
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:isInterrupting ;
                                                  owl:hasValue "true"^^xsd:boolean
                                                ] ;
                                owl:disjointWith ext:EscalationEventNonInterrupting ;
                                base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:EscalationEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For an Escalation Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For an Escalation Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                           base:EndEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For an Escalation Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For an Escalation Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#EscalationEventMarker
ext:EscalationEventMarker rdf:type owl:Class ;
                          rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#EscalationEventNonInterrupting
ext:EscalationEventNonInterrupting rdf:type owl:Class ;
                                   owl:equivalentClass [ owl:intersectionOf ( ext:EscalationEvent
                                                                              [ rdf:type owl:Restriction ;
                                                                                owl:onProperty base:isInterrupting ;
                                                                                owl:hasValue "false"^^xsd:boolean
                                                                              ]
                                                                            ) ;
                                                         rdf:type owl:Class
                                                       ] ;
                                   rdfs:subClassOf ext:EscalationEvent ,
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty ext:usedAs ;
                                                     owl:allValuesFrom [ rdf:type owl:Class ;
                                                                         owl:unionOf ( ext:StartEventEventSubProcess
                                                                                       base:BoundaryEvent
                                                                                     )
                                                                       ]
                                                   ] ,
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty base:isInterrupting ;
                                                     owl:hasValue "false"^^xsd:boolean
                                                   ] ;
                                   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:EscalationEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For an Escalation Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For an Escalation Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EscalationEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For an Escalation Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see upper figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For an Escalation Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#EventMarkerEnumeration
ext:EventMarkerEnumeration rdf:type owl:Class ;
                           owl:equivalentClass [ rdf:type owl:Class ;
                                                 owl:unionOf ( ext:CancelEventMarker
                                                               ext:CompensationEventMarker
                                                               ext:ConditionalEventMarker
                                                               ext:ErrorEventMarker
                                                               ext:EscalationEventMarker
                                                               ext:LinkEventMarker
                                                               ext:MessageEventMarker
                                                               ext:MultipleEventMarker
                                                               ext:NoneEventMarker
                                                               ext:ParallelMultipleEventMarker
                                                               ext:SignalEventMarker
                                                               ext:TerminateEventMarker
                                                               ext:TimerEventMarker
                                                             )
                                               ] ;
                           rdfs:subClassOf base:Enumerations .


###  http://www.scch.at/ontologies/bpmn20.owl#EventSubProcess
ext:EventSubProcess rdf:type owl:Class ;
                    owl:equivalentClass [ owl:intersectionOf ( base:SubProcess
                                                               [ rdf:type owl:Restriction ;
                                                                 owl:onProperty base:triggeredByEvent ;
                                                                 owl:hasValue "true"^^xsd:boolean
                                                               ]
                                                             ) ;
                                          rdf:type owl:Class
                                        ] ;
                    rdfs:subClassOf base:SubProcess ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:hasElement ;
                                      owl:allValuesFrom [ rdf:type owl:Class ;
                                                          owl:unionOf ( [ rdf:type owl:Class ;
                                                                          owl:complementOf base:StartEvent
                                                                        ]
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty ext:hasEventMarker ;
                                                                          owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                              owl:unionOf ( ext:CompensationEventMarker
                                                                                                            ext:ConditionalEventMarker
                                                                                                            ext:ErrorEventMarker
                                                                                                            ext:EscalationEventMarker
                                                                                                            ext:MessageEventMarker
                                                                                                            ext:MultipleEventMarker
                                                                                                            ext:ParallelMultipleEventMarker
                                                                                                            ext:SignalEventMarker
                                                                                                            ext:TimerEventMarker
                                                                                                          )
                                                                                            ]
                                                                        ]
                                                                      )
                                                        ]
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:hasElement ;
                                      owl:allValuesFrom [ rdf:type owl:Class ;
                                                          owl:unionOf ( [ rdf:type owl:Class ;
                                                                          owl:complementOf base:StartEvent
                                                                        ]
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:isInterrupting ;
                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                          owl:onDataRange xsd:boolean
                                                                        ]
                                                                      )
                                                        ]
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:hasElement ;
                                      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:BoundaryEvent
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty ext:hasElement ;
                                      owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:StartEvent
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty base:boundaryEventRefs ;
                                      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:BoundaryEvent
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty base:incoming ;
                                      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:SequenceFlow
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty base:outgoing ;
                                      owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                      owl:onClass base:SequenceFlow
                                    ] ,
                                    [ rdf:type owl:Restriction ;
                                      owl:onProperty base:triggeredByEvent ;
                                      owl:hasValue "true"^^xsd:boolean
                                    ] ;
                    base:bpmnSpecification "An Event Sub-Process is a specialized Sub-Process that is used within a Process (or Sub-Process). A Sub-Process is defined as an Event Sub-Process when its triggeredByEvent attribute is set to true." ;
                    rdfs:comment "The classes EmbeddedSubProcess and EventSubProcess are defined as subclasses of SubProcess for several reasons, which are described in more detail in the paper." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubProcess
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:triggeredByEvent ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "An Event Sub-Process is a specialized Sub-Process that is used within a Process (or Sub-Process). A Sub-Process is defined as an Event Sub-Process when its triggeredByEvent attribute is set to true."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:CompensationEventMarker
                                                                                               ext:ConditionalEventMarker
                                                                                               ext:ErrorEventMarker
                                                                                               ext:EscalationEventMarker
                                                                                               ext:MessageEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:ParallelMultipleEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TimerEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """The Start Event of an Event Sub-Process MUST have a defined trigger.
The Start Event trigger (EventDefinition) MUST be from the following types: Message, Error, Escalation, Compensation, Conditional, Signal, and Multiple (see page 26 for more details).

However, Table 10.93 mentiones two further possible StartEvents: Timer and Parallel Multiple."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:isInterrupting ;
                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                             owl:onDataRange xsd:boolean
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "There are two possible consequences to the parent Process when an Event Sub-Process is triggered: 1) the parent Process can be interrupted, and 2) the parent Process can continue its work (not interrupted). This is determined by the type of Start Event that is used."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:BoundaryEvent
                       ] ;
   base:bpmnSpecification """Event Sub-Processes are self-contained and MUST not be connected to the rest of the Sequence Flows in the Sub-Processes; also they
cannot have attached boundary Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:StartEvent
                       ] ;
   base:bpmnSpecification "An Event Sub-Process MUST have one and only one Start Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:boundaryEventRefs ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:BoundaryEvent
                       ] ;
   base:bpmnSpecification """Event Sub-Processes are self-contained and MUST not be connected to the rest of the Sequence Flows in the Sub-Processes; also they
cannot have attached boundary Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "An Event Sub-Process MUST NOT have any incoming or outgoing Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "An Event Sub-Process MUST NOT have any incoming or outgoing Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:EventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:triggeredByEvent ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification "A Sub-Process is defined as an Event Sub-Process when its triggeredByEvent attribute is set to true."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ExclusiveEventBasedGateway
ext:ExclusiveEventBasedGateway rdf:type owl:Class ;
                               owl:equivalentClass [ owl:intersectionOf ( base:EventBasedGateway
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventGatewayType ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:Exclusive
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ] ;
                               rdfs:subClassOf base:EventBasedGateway ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:eventGatewayType ;
                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:Exclusive
                                               ] ;
                               base:bpmnSpecification """If the Event Gateway’s instantiate attribute is set to true, then the marker for the Event Gateway looks like a Multiple Start Event (see Figure 10.118). Figure 10.118 – Exclusive Event-Based Gateway to start a Process
""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExclusiveEventBasedGateway ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:EventBasedGateway
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventGatewayType ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Exclusive
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "If the Event Gateway’s instantiate attribute is set to true, then the marker for the Event Gateway looks like a Multiple Start Event (see Figure 10.118). Figure 10.118 – Exclusive Event-Based Gateway to start a Process"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExclusiveEventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventGatewayType ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Exclusive
                       ] ;
   base:bpmnSpecification """If the Event Gateway’s instantiate attribute is set to true, then the marker for the Event Gateway looks like a Multiple Start Event (see Figure 10.118). Figure 10.118 – Exclusive Event-Based Gateway to start a Process

...for Event Gateway’s that do not instantiate the Process MUST be
Exclusive"""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ExpandedSubChoreography
ext:ExpandedSubChoreography rdf:type owl:Class ;
                            owl:equivalentClass [ owl:intersectionOf ( base:SubChoreography
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty ext:hasMarker ;
                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass ext:CollapsedMarker
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ] ;
                            rdfs:subClassOf base:SubChoreography ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:hasMarker ;
                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                              owl:onClass ext:CollapsedMarker
                                            ] ;
                            base:bpmnSpecification "The Sub-Choreography can be in a collapsed view that hides its details (see Figure 11.17) or a Sub-Choreography can be expanded to show its details (a Choreography Process) within the Choreography Process in which it is contained (see Figure 11.19). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub- Choreography, rather than a Choreography Task." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExpandedSubChoreography ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubChoreography
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CollapsedMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "The Sub-Choreography can be in a collapsed view that hides its details (see Figure 11.17) or a Sub-Choreography can be expanded to show its details (a Choreography Process) within the Choreography Process in which it is contained (see Figure 11.19). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub- Choreography, rather than a Choreography Task."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExpandedSubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification "In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Choreography, rather than a Choreography Task."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ExpandedSubConversation
ext:ExpandedSubConversation rdf:type owl:Class ;
                            owl:equivalentClass [ owl:intersectionOf ( base:SubConversation
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty ext:hasMarker ;
                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass ext:CollapsedMarker
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ] ;
                            rdfs:subClassOf base:SubConversation ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:hasMarker ;
                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                              owl:onClass ext:CollapsedMarker
                                            ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExpandedSubConversation ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubConversation
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CollapsedMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """The Sub- Conversation marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape.

A Sub-Conversation is a graphical object within a Collaboration, but it also can be “opened up” to show the lowerlevel details of the Conversation, which consist of Message Flows, Conversations, and/or other Sub-Conversations."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExpandedSubConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification """The Sub- Conversation marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape.

A Sub-Conversation is a graphical object within a Collaboration, but it also can be “opened up” to show the lowerlevel details of the Conversation, which consist of Message Flows, Conversations, and/or other Sub-Conversations."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ExpandedSubProcess
ext:ExpandedSubProcess rdf:type owl:Class ;
                       owl:equivalentClass [ owl:intersectionOf ( base:SubProcess
                                                                  [ rdf:type owl:Restriction ;
                                                                    owl:onProperty ext:hasMarker ;
                                                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                    owl:onClass ext:CollapsedMarker
                                                                  ]
                                                                ) ;
                                             rdf:type owl:Class
                                           ] ;
                       rdfs:subClassOf base:SubProcess ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasMarker ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:CollapsedMarker
                                       ] ;
                       base:bpmnSpecification """The Sub-Process can be in a collapsed view that hides its details (see Figure 10.25) or a Sub-Process can be in an
expanded view that shows its details within the view of the Process in which it is contained (see Figure 10.26).
....
Expanded Sub-Processes can be used as a mechanism for showing a group of parallel Activities in a less-cluttered,
more compact way.""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExpandedSubProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubProcess
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:CollapsedMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """The Sub-Process can be in a collapsed view that hides its details (see Figure 10.25) or a Sub-Process can be in an expanded view that shows its details within the view of the Process in which it is contained (see Figure 10.26). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Process, rather than a Task.
* The Sub-Process marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ExpandedSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification """The Sub-Process can be in a collapsed view that hides its details (see Figure 10.25) or a Sub-Process can be in an expanded view that shows its details within the view of the Process in which it is contained (see Figure 10.26). In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Process, rather than a Task.
* The Sub-Process marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#FailedCompletion
ext:FailedCompletion rdf:type owl:Class ;
                     rdfs:subClassOf ext:TransactionResultEnumeration ;
                     rdfs:comment "Synonym: Cancel" .


###  http://www.scch.at/ontologies/bpmn20.owl#GatewayDirectionConverging
ext:GatewayDirectionConverging rdf:type owl:Class ;
                               owl:equivalentClass [ owl:intersectionOf ( base:Gateway
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:gatewayDirection ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:Converging
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ] ;
                               rdfs:subClassOf base:Gateway ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:incoming ;
                                                 owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:SequenceFlow
                                               ] ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:gatewayDirection ;
                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:Converging
                                               ] ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:outgoing ;
                                                 owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:SequenceFlow
                                               ] ;
                               base:bpmnSpecification "A Gateway with a gatewayDirection of converging MUST have multiple incoming Sequence Flows, but MUST NOT have multiple outgoing Sequence Flows. " .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionConverging ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Gateway
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:gatewayDirection ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Converging
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of converging MUST have multiple incoming Sequence Flows, but MUST NOT have multiple outgoing Sequence Flows. "
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionConverging ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of converging MUST have multiple incoming Sequence Flows, but MUST NOT have multiple outgoing Sequence Flows. "
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionConverging ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:gatewayDirection ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Converging
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of converging MUST have multiple incoming Sequence Flows, but MUST NOT have multiple outgoing Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionConverging ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of converging MUST have multiple incoming Sequence Flows, but MUST NOT have multiple outgoing Sequence Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#GatewayDirectionDiverging
ext:GatewayDirectionDiverging rdf:type owl:Class ;
                              owl:equivalentClass [ owl:intersectionOf ( base:Gateway
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:gatewayDirection ;
                                                                           owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass base:Diverging
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ] ;
                              rdfs:subClassOf base:Gateway ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:outgoing ;
                                                owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:SequenceFlow
                                              ] ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:gatewayDirection ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Diverging
                                              ] ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:incoming ;
                                                owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:SequenceFlow
                                              ] ;
                              base:bpmnSpecification "A Gateway with a gatewayDirection of diverging MUST have multiple outgoing Sequence Flows, but MUST NOT have multiple incoming Sequence Flows." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionDiverging ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Gateway
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:gatewayDirection ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Diverging
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of diverging MUST have multiple outgoing Sequence Flows, but MUST NOT have multiple incoming Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionDiverging ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of diverging MUST have multiple outgoing Sequence Flows, but MUST NOT have multiple incoming Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionDiverging ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:gatewayDirection ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Diverging
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of diverging MUST have multiple outgoing Sequence Flows, but MUST NOT have multiple incoming Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionDiverging ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of diverging MUST have multiple outgoing Sequence Flows, but MUST NOT have multiple incoming Sequence Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#GatewayDirectionMixed
ext:GatewayDirectionMixed rdf:type owl:Class ;
                          owl:equivalentClass [ owl:intersectionOf ( base:Gateway
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:gatewayDirection ;
                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass base:Mixed
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ] ;
                          rdfs:subClassOf base:Gateway ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty base:incoming ;
                                            owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                            owl:onClass base:SequenceFlow
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty base:outgoing ;
                                            owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                            owl:onClass base:SequenceFlow
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty base:gatewayDirection ;
                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                            owl:onClass base:Mixed
                                          ] ;
                          base:bpmnSpecification "A Gateway with a gatewayDirection of mixed MUST have both multiple incoming and outgoing Sequence Flows. " .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionMixed ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Gateway
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:gatewayDirection ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Mixed
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of mixed MUST have both multiple incoming and outgoing Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionMixed ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of mixed MUST have both multiple incoming and outgoing Sequence Flows. "
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionMixed ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of mixed MUST have both multiple incoming and outgoing Sequence Flows. "
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionMixed ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:gatewayDirection ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Mixed
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of mixed MUST have both multiple incoming and outgoing Sequence Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#GatewayDirectionUnspecified
ext:GatewayDirectionUnspecified rdf:type owl:Class ;
                                owl:equivalentClass [ owl:intersectionOf ( base:Gateway
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:gatewayDirection ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:Unspecified
                                                                           ]
                                                                         ) ;
                                                      rdf:type owl:Class
                                                    ] ;
                                rdfs:subClassOf base:Gateway ,
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:gatewayDirection ;
                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:Unspecified
                                                ] ;
                                base:bpmnSpecification "A Gateway with a gatewayDirection of unspecified MAY have both multiple incoming and outgoing Sequence Flows. " .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionUnspecified ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Gateway
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:gatewayDirection ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Unspecified
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of unspecified MAY have both multiple incoming and outgoing Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:GatewayDirectionUnspecified ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:gatewayDirection ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Unspecified
                       ] ;
   base:bpmnSpecification "A Gateway with a gatewayDirection of unspecified MAY have both multiple incoming and outgoing Sequence Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#Hazard
ext:Hazard rdf:type owl:Class ;
           rdfs:subClassOf ext:TransactionResultEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#LinkEvent
ext:LinkEvent rdf:type owl:Class ;
              owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                         [ rdf:type owl:Class ;
                                                           owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                  owl:onProperty base:eventDefinitionRefs ;
                                                                                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                  owl:onClass base:EventDefinition
                                                                                                ]
                                                                                                [ rdf:type owl:Restriction ;
                                                                                                  owl:onProperty base:eventDefinitions ;
                                                                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                  owl:onClass base:EventDefinition
                                                                                                ]
                                                                                              ) ;
                                                                           rdf:type owl:Class
                                                                         ]
                                                                         [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                  owl:onProperty base:eventDefinitionRefs ;
                                                                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                  owl:onClass base:EventDefinition
                                                                                                ]
                                                                                                [ rdf:type owl:Restriction ;
                                                                                                  owl:onProperty base:eventDefinitions ;
                                                                                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                  owl:onClass base:EventDefinition
                                                                                                ]
                                                                                              ) ;
                                                                           rdf:type owl:Class
                                                                         ]
                                                                       )
                                                         ]
                                                         [ rdf:type owl:Class ;
                                                           owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:eventDefinitionRefs ;
                                                                           owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass base:LinkEventDefinition
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:eventDefinitions ;
                                                                           owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass base:LinkEventDefinition
                                                                         ]
                                                                       )
                                                         ]
                                                       ) ;
                                    rdf:type owl:Class
                                  ] ,
                                  [ owl:intersectionOf ( base:Event
                                                         [ rdf:type owl:Restriction ;
                                                           owl:onProperty ext:hasEventMarker ;
                                                           owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                           owl:onClass ext:LinkEventMarker
                                                         ]
                                                       ) ;
                                    rdf:type owl:Class
                                  ] ;
              rdfs:subClassOf base:Event ,
                              [ rdf:type owl:Class ;
                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass base:EventDefinition
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:eventDefinitions ;
                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass base:EventDefinition
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ]
                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass base:EventDefinition
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:eventDefinitions ;
                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass base:EventDefinition
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ]
                                            )
                              ] ,
                              [ rdf:type owl:Class ;
                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventDefinitionRefs ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:LinkEventDefinition
                                              ]
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventDefinitions ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:LinkEventDefinition
                                              ]
                                            )
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:hasEventMarker ;
                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                owl:onClass ext:LinkEventMarker
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:incomingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:outgoingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ;
              base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:LinkEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:LinkEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:LinkEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.83 shows the variations of Link Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:LinkEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:LinkEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """The types of Event Definitions are:
CancelEventDefinition, CompensationEventDefinition, ConditionalEventDefinition, ErrorEventDefinition, EscalationEventDefinition, MessageEventDefinition, LinkEventDefinition, ..."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:LinkEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.83 shows the variations of Link Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#LinkEventInterrupting
ext:LinkEventInterrupting rdf:type owl:Class ;
                          owl:equivalentClass [ owl:intersectionOf ( ext:LinkEvent
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:isInterrupting ;
                                                                       owl:hasValue "true"^^xsd:boolean
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ] ;
                          rdfs:subClassOf ext:LinkEvent ,
                                          [ rdf:type owl:Class ;
                                            owl:unionOf ( [ rdf:type owl:Restriction ;
                                                            owl:onProperty base:incoming ;
                                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                            owl:onClass base:SequenceFlow
                                                          ]
                                                          [ rdf:type owl:Restriction ;
                                                            owl:onProperty base:outgoing ;
                                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                            owl:onClass base:SequenceFlow
                                                          ]
                                                        )
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:usedAs ;
                                            owl:allValuesFrom [ rdf:type owl:Class ;
                                                                owl:unionOf ( base:IntermediateCatchEvent
                                                                              base:IntermediateThrowEvent
                                                                            )
                                                              ]
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty base:isInterrupting ;
                                            owl:hasValue "true"^^xsd:boolean
                                          ] ;
                          base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:LinkEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "A Link Intermediate Event MUST NOT be both a target and a source of a Sequence Flow. A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:IntermediateCatchEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:LinkEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#LinkEventMarker
ext:LinkEventMarker rdf:type owl:Class ;
                    rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#LoopMarker
ext:LoopMarker rdf:type owl:Class ;
               owl:equivalentClass [ rdf:type owl:Class ;
                                     owl:unionOf ( ext:MultiInstanceLoopMarker
                                                   ext:StandardLoopMarker
                                                 )
                                   ] ;
               rdfs:subClassOf ext:MarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#MarkerEnumeration
ext:MarkerEnumeration rdf:type owl:Class ;
                      owl:equivalentClass [ rdf:type owl:Class ;
                                            owl:unionOf ( ext:AdHocMarker
                                                          ext:CollapsedMarker
                                                          ext:CompensationMarker
                                                          ext:LoopMarker
                                                          ext:MultiInstanceMarker
                                                        )
                                          ] ;
                      rdfs:subClassOf base:Enumerations .


###  http://www.scch.at/ontologies/bpmn20.owl#MessageEvent
ext:MessageEvent rdf:type owl:Class ;
                 owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                            [ rdf:type owl:Class ;
                                                              owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                     owl:onProperty base:eventDefinitionRefs ;
                                                                                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                     owl:onClass base:EventDefinition
                                                                                                   ]
                                                                                                   [ rdf:type owl:Restriction ;
                                                                                                     owl:onProperty base:eventDefinitions ;
                                                                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                     owl:onClass base:EventDefinition
                                                                                                   ]
                                                                                                 ) ;
                                                                              rdf:type owl:Class
                                                                            ]
                                                                            [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                     owl:onProperty base:eventDefinitionRefs ;
                                                                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                     owl:onClass base:EventDefinition
                                                                                                   ]
                                                                                                   [ rdf:type owl:Restriction ;
                                                                                                     owl:onProperty base:eventDefinitions ;
                                                                                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                     owl:onClass base:EventDefinition
                                                                                                   ]
                                                                                                 ) ;
                                                                              rdf:type owl:Class
                                                                            ]
                                                                          )
                                                            ]
                                                            [ rdf:type owl:Class ;
                                                              owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:eventDefinitionRefs ;
                                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                              owl:onClass base:MessageEventDefinition
                                                                            ]
                                                                            [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:eventDefinitions ;
                                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                              owl:onClass base:MessageEventDefinition
                                                                            ]
                                                                          )
                                                            ]
                                                          ) ;
                                       rdf:type owl:Class
                                     ] ,
                                     [ owl:intersectionOf ( base:Event
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty ext:hasEventMarker ;
                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass ext:MessageEventMarker
                                                            ]
                                                          ) ;
                                       rdf:type owl:Class
                                     ] ;
                 rdfs:subClassOf base:Event ,
                                 [ rdf:type owl:Class ;
                                   owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:eventDefinitionRefs ;
                                                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                          owl:onClass base:EventDefinition
                                                                        ]
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:eventDefinitions ;
                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                          owl:onClass base:EventDefinition
                                                                        ]
                                                                      ) ;
                                                   rdf:type owl:Class
                                                 ]
                                                 [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:eventDefinitionRefs ;
                                                                          owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                          owl:onClass base:EventDefinition
                                                                        ]
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:eventDefinitions ;
                                                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                          owl:onClass base:EventDefinition
                                                                        ]
                                                                      ) ;
                                                   rdf:type owl:Class
                                                 ]
                                               )
                                 ] ,
                                 [ rdf:type owl:Class ;
                                   owl:unionOf ( [ rdf:type owl:Restriction ;
                                                   owl:onProperty ext:incomingMsgFlow ;
                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                   owl:onClass base:MessageFlow
                                                 ]
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty ext:outgoingMsgFlow ;
                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                   owl:onClass base:MessageFlow
                                                 ]
                                               )
                                 ] ,
                                 [ rdf:type owl:Class ;
                                   owl:unionOf ( [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:eventDefinitionRefs ;
                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                   owl:onClass base:MessageEventDefinition
                                                 ]
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:eventDefinitions ;
                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                   owl:onClass base:MessageEventDefinition
                                                 ]
                                               )
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:incomingMsgFlow ;
                                   owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                   owl:onClass base:MessageFlow
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:hasEventMarker ;
                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                   owl:onClass ext:MessageEventMarker
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:outgoingMsgFlow ;
                                   owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                   owl:onClass base:MessageFlow
                                 ] ;
                 base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:MessageEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:MessageEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is only one (1) EventDefinition associated with the Start
Event and that EventDefinition is of the subclass MessageEvent-
Definition, then the Event is a Message Start Event and MUST be
displayed with an envelope marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:MessageEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.88 shows the variations of Message Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass MessageEvent-
Definition, then the Event is a Message Start Event and MUST be
displayed with an envelope marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:incomingMsgFlow ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:outgoingMsgFlow ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY have an incoming Message Flow or an outgoing Message Flow, but not both."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass MessageEvent-
Definition, then the Event is a Message Start Event and MUST be
displayed with an envelope marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """A Start Event MAY be the target for a Message Flow; it can have zero (0) or more incoming Message Flows.
A Message Intermediate Event MAY be the target for a Message Flow; it can have one incoming Message Flow."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:MessageEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.88 shows the variations of Message Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#MessageEventInterrupting
ext:MessageEventInterrupting rdf:type owl:Class ;
                             owl:equivalentClass [ owl:intersectionOf ( ext:MessageEvent
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:isInterrupting ;
                                                                          owl:hasValue "true"^^xsd:boolean
                                                                        ]
                                                                      ) ;
                                                   rdf:type owl:Class
                                                 ] ;
                             rdfs:subClassOf ext:MessageEvent ,
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty ext:usedAs ;
                                               owl:allValuesFrom [ rdf:type owl:Class ;
                                                                   owl:unionOf ( ext:StartEventEventSubProcess
                                                                                 ext:StartEventNotEventSubProcess
                                                                                 base:BoundaryEvent
                                                                                 base:EndEvent
                                                                                 base:IntermediateCatchEvent
                                                                                 base:IntermediateThrowEvent
                                                                               )
                                                                 ]
                                             ] ,
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty base:isInterrupting ;
                                               owl:hasValue "true"^^xsd:boolean
                                             ] ;
                             owl:disjointWith ext:MessageEventNonInterrupting ;
                             base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:MessageEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Message Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Message Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           ext:StartEventNotEventSubProcess
                                                           base:BoundaryEvent
                                                           base:EndEvent
                                                           base:IntermediateCatchEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Message Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Message Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#MessageEventMarker
ext:MessageEventMarker rdf:type owl:Class ;
                       rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#MessageEventNonInterrupting
ext:MessageEventNonInterrupting rdf:type owl:Class ;
                                owl:equivalentClass [ owl:intersectionOf ( ext:MessageEvent
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:isInterrupting ;
                                                                             owl:hasValue "false"^^xsd:boolean
                                                                           ]
                                                                         ) ;
                                                      rdf:type owl:Class
                                                    ] ;
                                rdfs:subClassOf ext:MessageEvent ,
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty ext:usedAs ;
                                                  owl:allValuesFrom [ rdf:type owl:Class ;
                                                                      owl:unionOf ( ext:StartEventEventSubProcess
                                                                                    base:BoundaryEvent
                                                                                  )
                                                                    ]
                                                ] ,
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:isInterrupting ;
                                                  owl:hasValue "false"^^xsd:boolean
                                                ] ;
                                base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:MessageEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Message Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Message Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MessageEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Message Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Message Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#MultiInstanceLoopMarker
ext:MultiInstanceLoopMarker rdf:type owl:Class ;
                            rdfs:subClassOf ext:LoopMarker ;
                            owl:disjointWith ext:StandardLoopMarker .


###  http://www.scch.at/ontologies/bpmn20.owl#MultiInstanceMarker
ext:MultiInstanceMarker rdf:type owl:Class ;
                        owl:equivalentClass [ rdf:type owl:Class ;
                                              owl:unionOf ( ext:ParallelMultiInstanceMarker
                                                            ext:SequentialMultiInstanceMarker
                                                          )
                                            ] ;
                        rdfs:subClassOf ext:MarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#MultipleEvent
ext:MultipleEvent rdf:type owl:Class ;
                  owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                             [ rdf:type owl:Restriction ;
                                                               owl:onProperty ext:hasEventMarker ;
                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                               owl:onClass ext:MultipleEventMarker
                                                             ]
                                                           ) ;
                                        rdf:type owl:Class
                                      ] ;
                  rdfs:subClassOf base:Event ,
                                  [ rdf:type owl:Class ;
                                    owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:eventDefinitionRefs ;
                                                                           owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass base:EventDefinition
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:eventDefinitions ;
                                                                           owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass base:EventDefinition
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ]
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty base:eventDefinitionRefs ;
                                                    owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                    owl:onClass base:EventDefinition
                                                  ]
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty base:eventDefinitions ;
                                                    owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                    owl:onClass base:EventDefinition
                                                  ]
                                                )
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:incomingMsgFlow ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:MessageFlow
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:outgoingMsgFlow ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:MessageFlow
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:eventDefinitions ;
                                    owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:EventDefinition
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasEventMarker ;
                                    owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                    owl:onClass ext:MultipleEventMarker
                                  ] ;
                  base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:MultipleEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.90 shows the variations of Multiple Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:EventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:EventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If the Start Event has more than one associated EventDefiniton, then the Event MUST be displayed with the Multiple Event marker (a pentagon—see the upper figure to the right).
If the Intermediate Event has more than one associated EventDefiniton, then the Event will be displayed with the Multiple Event marker.
Annotation: It could also be a parallel multiple event, depending on the attribute parallelMultiple, which is only specified for CatchEvents."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """Regarding this restriction the specification is ambigious. According to Table 7.4 – Message Flow Connection Rules only Evetns with Message Trigger have Message Flows. However for EndEvents the following is mentioned: The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows.
Therefore, the author assumes that the same is also applicable for Start- and Catch-Events and, therefore, for incoming Message Flows."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventDefinitions ;
                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EventDefinition
                       ] ;
   base:bpmnSpecification "A Multiple Event is determined by an Event that specifies more than one Event Definition."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:MultipleEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.90 shows the variations of Multiple Events."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#MultipleEventInterrupting
ext:MultipleEventInterrupting rdf:type owl:Class ;
                              owl:equivalentClass [ owl:intersectionOf ( ext:MultipleEvent
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:isInterrupting ;
                                                                           owl:hasValue "true"^^xsd:boolean
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ] ;
                              rdfs:subClassOf ext:MultipleEvent ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:usedAs ;
                                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                                    owl:unionOf ( ext:StartEventEventSubProcess
                                                                                  ext:StartEventNotEventSubProcess
                                                                                  base:BoundaryEvent
                                                                                  base:EndEvent
                                                                                  base:IntermediateCatchEvent
                                                                                  base:IntermediateThrowEvent
                                                                                )
                                                                  ]
                                              ] ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ] ;
                              owl:disjointWith ext:MultipleEventNonInterrupting ;
                              base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:MultipleEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Multiple Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Multiple Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           ext:StartEventNotEventSubProcess
                                                           base:BoundaryEvent
                                                           base:EndEvent
                                                           base:IntermediateCatchEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Multiple Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Multiple Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#MultipleEventMarker
ext:MultipleEventMarker rdf:type owl:Class ;
                        rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#MultipleEventNonInterrupting
ext:MultipleEventNonInterrupting rdf:type owl:Class ;
                                 owl:equivalentClass [ owl:intersectionOf ( ext:MultipleEvent
                                                                            [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:isInterrupting ;
                                                                              owl:hasValue "false"^^xsd:boolean
                                                                            ]
                                                                          ) ;
                                                       rdf:type owl:Class
                                                     ] ;
                                 rdfs:subClassOf ext:MultipleEvent ,
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty ext:usedAs ;
                                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                                       owl:unionOf ( ext:StartEventEventSubProcess
                                                                                     base:BoundaryEvent
                                                                                   )
                                                                     ]
                                                 ] ,
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:isInterrupting ;
                                                   owl:hasValue "false"^^xsd:boolean
                                                 ] ;
                                 base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:MultipleEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Multiple Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Multiple Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:MultipleEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Multiple Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Multiple Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#NoneEvent
ext:NoneEvent rdf:type owl:Class ;
              owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                         [ rdf:type owl:Restriction ;
                                                           owl:onProperty ext:hasEventMarker ;
                                                           owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                           owl:onClass ext:NoneEventMarker
                                                         ]
                                                       ) ;
                                    rdf:type owl:Class
                                  ] ,
                                  [ owl:intersectionOf ( base:Event
                                                         [ rdf:type owl:Restriction ;
                                                           owl:onProperty base:eventDefinitionRefs ;
                                                           owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                           owl:onClass base:EventDefinition
                                                         ]
                                                         [ rdf:type owl:Restriction ;
                                                           owl:onProperty base:eventDefinitions ;
                                                           owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                           owl:onClass base:EventDefinition
                                                         ]
                                                       ) ;
                                    rdf:type owl:Class
                                  ] ;
              rdfs:subClassOf base:Event ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:hasEventMarker ;
                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                owl:onClass ext:NoneEventMarker
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:incomingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:outgoingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty base:eventDefinitionRefs ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:EventDefinition
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty base:eventDefinitions ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:EventDefinition
                              ] ;
              base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:NoneEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """The None Start Event does not have a defined trigger.

Figure 10.91 shows the variations of None Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventDefinitionRefs ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:EventDefinition
                                              ]
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventDefinitions ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:EventDefinition
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "If the Start Event has no associated EventDefinition, then the Event MUST be displayed without a marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:NoneEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.91 shows the variations of None Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventDefinitionRefs ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EventDefinition
                       ] ;
   base:bpmnSpecification """There is no specific EventDefinition subclass (see page 268) for None Start Events.

If the End Event has no associated EventDefiniton, then the Event will be displayed without a marker (see the figure on the right).

If the (throw) Intermediate Event has no associated EventDefiniton, then the Event MUST be displayed without a marker (see the figure on the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventDefinitions ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EventDefinition
                       ] ;
   base:bpmnSpecification """A None Event is determined by an Event that does not specify an
Event Definition.

If the End Event has no associated EventDefiniton, then the Event will be displayed without a marker (see the figure on the right).

If the (throw) Intermediate Event has no associated EventDefiniton, then the Event MUST be displayed without a marker (see the figure on the right)."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#NoneEventInterrupting
ext:NoneEventInterrupting rdf:type owl:Class ;
                          owl:equivalentClass [ owl:intersectionOf ( ext:NoneEvent
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:isInterrupting ;
                                                                       owl:hasValue "true"^^xsd:boolean
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ] ;
                          rdfs:subClassOf ext:NoneEvent ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:usedAs ;
                                            owl:allValuesFrom [ rdf:type owl:Class ;
                                                                owl:unionOf ( ext:StartEventNotEventSubProcess
                                                                              base:EndEvent
                                                                              base:IntermediateThrowEvent
                                                                            )
                                                              ]
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty base:isInterrupting ;
                                            owl:hasValue "true"^^xsd:boolean
                                          ] ;
                          base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:NoneEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventNotEventSubProcess
                                                           base:EndEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:NoneEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#NoneEventMarker
ext:NoneEventMarker rdf:type owl:Class ;
                    rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#ParallelEventBasedGateway
ext:ParallelEventBasedGateway rdf:type owl:Class ;
                              owl:equivalentClass [ owl:intersectionOf ( base:EventBasedGateway
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:eventGatewayType ;
                                                                           owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass base:Parallel
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ] ;
                              rdfs:subClassOf base:EventBasedGateway ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventGatewayType ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Parallel
                                              ] ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:instantiate ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ] ;
                              base:bpmnSpecification "If the Event Gateway’s instantiate attribute is set to true and the eventGatewayType attribute is set to Parallel, then the marker for the Event Gateway looks like a Parallel Multiple Start Event (see Figure 10.119). The Event Gateway’s instantiate attribute MUST be set to true in order for the eventGatewayType attribute to be set to Parallel (i.e., for Event Gateway’s that do not instantiate the Process MUST be Exclusive—a standard Parallel Gateway can be used to include parallel Events in the middle of a Process)." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelEventBasedGateway ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:EventBasedGateway
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:eventGatewayType ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Parallel
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If the Event Gateway’s instantiate attribute is set to true and the eventGatewayType attribute is set to Parallel, then the marker for the Event Gateway looks like a Parallel Multiple Start Event (see Figure 10.119). The Event Gateway’s instantiate attribute MUST be set to true in order for the eventGatewayType attribute to be set to Parallel (i.e., for Event Gateway’s that do not instantiate the Process MUST be Exclusive—a standard Parallel Gateway can be used to include parallel Events in the middle of a Process).

The attribute can only be set to parallel when the instantiate
attribute is set to true."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelEventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventGatewayType ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Parallel
                       ] ;
   base:bpmnSpecification """The Event Gateway’s instantiate attribute MUST be set to true in order for the eventGatewayType attribute to be set to Parallel.

The attribute can only be set to parallel when the instantiate
attribute is set to true."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelEventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:instantiate ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """The Event Gateway’s instantiate attribute MUST be set to true in order for the eventGatewayType attribute to be set to Parallel.

The attribute can only be set to parallel when the instantiate
attribute is set to true."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ParallelMultiInstanceMarker
ext:ParallelMultiInstanceMarker rdf:type owl:Class ;
                                rdfs:subClassOf ext:MultiInstanceMarker ;
                                owl:disjointWith ext:SequentialMultiInstanceMarker .


###  http://www.scch.at/ontologies/bpmn20.owl#ParallelMultipleEvent
ext:ParallelMultipleEvent rdf:type owl:Class ;
                          owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:hasEventMarker ;
                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass ext:ParallelMultipleEventMarker
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ] ;
                          rdfs:subClassOf base:Event ,
                                          [ rdf:type owl:Class ;
                                            owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:eventDefinitionRefs ;
                                                                                   owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                   owl:onClass base:EventDefinition
                                                                                 ]
                                                                                 [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:eventDefinitions ;
                                                                                   owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                   owl:onClass base:EventDefinition
                                                                                 ]
                                                                               ) ;
                                                            rdf:type owl:Class
                                                          ]
                                                          [ rdf:type owl:Restriction ;
                                                            owl:onProperty base:eventDefinitionRefs ;
                                                            owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                            owl:onClass base:EventDefinition
                                                          ]
                                                          [ rdf:type owl:Restriction ;
                                                            owl:onProperty base:eventDefinitions ;
                                                            owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                            owl:onClass base:EventDefinition
                                                          ]
                                                        )
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:hasEventMarker ;
                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                            owl:onClass ext:ParallelMultipleEventMarker
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:incomingMsgFlow ;
                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                            owl:onClass base:MessageFlow
                                          ] ,
                                          [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:outgoingMsgFlow ;
                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                            owl:onClass base:MessageFlow
                                          ] ;
                          base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:ParallelMultipleEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.92 shows the variations of Parallel Multiple Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:EventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:EventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If the Start Event has more than one associated EventDefiniton and the parallelMultiple attribute of the Start Event is true, then the Event MUST be displayed with the Parallel Multiple Event marker (an open plus sign—see the figure to the right).
If the Intermediate Event has more than one associated EventDefiniton and the parallelMultiple attribute of the Intermediate Event is true, then the Event will be displayed with the Parallel Multiple Event marker.
Annotation: It could also be a multiple event, depending on the attribute parallelMultiple, which is only specified for CatchEvents."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:ParallelMultipleEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.92 shows the variations of Parallel Multiple Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ParallelMultipleEventInterrupting
ext:ParallelMultipleEventInterrupting rdf:type owl:Class ;
                                      owl:equivalentClass [ owl:intersectionOf ( ext:ParallelMultipleEvent
                                                                                 [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:isInterrupting ;
                                                                                   owl:hasValue "true"^^xsd:boolean
                                                                                 ]
                                                                               ) ;
                                                            rdf:type owl:Class
                                                          ] ;
                                      rdfs:subClassOf ext:ParallelMultipleEvent ,
                                                      [ rdf:type owl:Restriction ;
                                                        owl:onProperty ext:usedAs ;
                                                        owl:allValuesFrom [ rdf:type owl:Class ;
                                                                            owl:unionOf ( ext:StartEventEventSubProcess
                                                                                          ext:StartEventNotEventSubProcess
                                                                                          base:BoundaryEvent
                                                                                          base:IntermediateCatchEvent
                                                                                        )
                                                                          ]
                                                      ] ,
                                                      [ rdf:type owl:Restriction ;
                                                        owl:onProperty base:isInterrupting ;
                                                        owl:hasValue "true"^^xsd:boolean
                                                      ] ;
                                      owl:disjointWith ext:ParallelMultipleEventNonInterrupting ;
                                      base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:ParallelMultipleEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Parallel Multiple Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see the upper figure to the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Parallel Multiple Event that does not interrupt the Activity to which
it is attached, the boundary of the Event is dashed (see the lower figure to
the right). Note that if using this notation, the attribute cancelActivity
of the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           ext:StartEventNotEventSubProcess
                                                           base:BoundaryEvent
                                                           base:IntermediateCatchEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Parallel Multiple Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see the upper figure to the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Parallel Multiple Event that does not interrupt the Activity to which
it is attached, the boundary of the Event is dashed (see the lower figure to
the right). Note that if using this notation, the attribute cancelActivity
of the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#ParallelMultipleEventMarker
ext:ParallelMultipleEventMarker rdf:type owl:Class ;
                                rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#ParallelMultipleEventNonInterrupting
ext:ParallelMultipleEventNonInterrupting rdf:type owl:Class ;
                                         owl:equivalentClass [ owl:intersectionOf ( ext:ParallelMultipleEvent
                                                                                    [ rdf:type owl:Restriction ;
                                                                                      owl:onProperty base:isInterrupting ;
                                                                                      owl:hasValue "false"^^xsd:boolean
                                                                                    ]
                                                                                  ) ;
                                                               rdf:type owl:Class
                                                             ] ;
                                         rdfs:subClassOf ext:ParallelMultipleEvent ,
                                                         [ rdf:type owl:Restriction ;
                                                           owl:onProperty ext:usedAs ;
                                                           owl:allValuesFrom [ rdf:type owl:Class ;
                                                                               owl:unionOf ( ext:StartEventEventSubProcess
                                                                                             base:BoundaryEvent
                                                                                           )
                                                                             ]
                                                         ] ,
                                                         [ rdf:type owl:Restriction ;
                                                           owl:onProperty base:isInterrupting ;
                                                           owl:hasValue "false"^^xsd:boolean
                                                         ] ;
                                         base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:ParallelMultipleEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Parallel Multiple Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see the upper figure to the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Parallel Multiple Event that does not interrupt the Activity to which
it is attached, the boundary of the Event is dashed (see the lower figure to
the right). Note that if using this notation, the attribute cancelActivity
of the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:ParallelMultipleEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Parallel Multiple Event that interrupts the Activity to which it is
attached, the boundary of the Event is solid (see the upper figure to the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to true.
For a Parallel Multiple Event that does not interrupt the Activity to which
it is attached, the boundary of the Event is dashed (see the lower figure to
the right). Note that if using this notation, the attribute cancelActivity
of the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#PrivateExecutableProcess
ext:PrivateExecutableProcess rdf:type owl:Class ;
                             owl:equivalentClass [ owl:intersectionOf ( ext:PrivateProcess
                                                                        [ rdf:type owl:Restriction ;
                                                                          owl:onProperty base:isExecutable ;
                                                                          owl:hasValue "true"^^xsd:boolean
                                                                        ]
                                                                      ) ;
                                                   rdf:type owl:Class
                                                 ] ;
                             rdfs:subClassOf ext:PrivateProcess ,
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty base:isExecutable ;
                                               owl:hasValue "true"^^xsd:boolean
                                             ] ;
                             owl:disjointWith ext:PrivateNonExecutableProcess ;
                             base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private Business Processes are those internal to a specific organization. These Processes have been generally
called workflow or BPM Processes (see Figure 10.4). Another synonym typically used in the Web services area is the
Orchestration of services. There are two (2) types of private Processes: executable and non-executable.

An executable Process is a Process that has been modeled for the purpose of being executed according to the semantics defined in Chapter 14 (see page 440). Of course, during the development cycle of the Process, there will be stages where the
Process does not have enough detail to be “executable.”""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PrivateExecutableProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:PrivateProcess
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isExecutable ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private (Internal) Business Processes
Private Business Processes are those internal to a specific organization."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PrivateExecutableProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isExecutable ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private (Internal) Business Processes
Private Business Processes are those internal to a specific organization."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#PrivateNonExecutableProcess
ext:PrivateNonExecutableProcess rdf:type owl:Class ;
                                owl:equivalentClass [ owl:intersectionOf ( ext:PrivateProcess
                                                                           [ rdf:type owl:Class ;
                                                                             owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                                             owl:onProperty base:isExecutable ;
                                                                                             owl:hasValue "false"^^xsd:boolean
                                                                                           ]
                                                                                           [ rdf:type owl:Restriction ;
                                                                                             owl:onProperty base:isExecutable ;
                                                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                             owl:onDataRange xsd:boolean
                                                                                           ]
                                                                                         )
                                                                           ]
                                                                         ) ;
                                                      rdf:type owl:Class
                                                    ] ;
                                rdfs:subClassOf ext:PrivateProcess ,
                                                [ rdf:type owl:Class ;
                                                  owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                  owl:onProperty base:isExecutable ;
                                                                  owl:hasValue "false"^^xsd:boolean
                                                                ]
                                                                [ rdf:type owl:Restriction ;
                                                                  owl:onProperty base:isExecutable ;
                                                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                  owl:onDataRange xsd:boolean
                                                                ]
                                                              )
                                                ] ;
                                base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private Business Processes are those internal to a specific organization. These Processes have been generally
called workflow or BPM Processes (see Figure 10.4). Another synonym typically used in the Web services area is the
Orchestration of services. There are two (2) types of private Processes: executable and non-executable.""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PrivateNonExecutableProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:PrivateProcess
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:isExecutable ;
                                                                owl:hasValue "false"^^xsd:boolean
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:isExecutable ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onDataRange xsd:boolean
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private (Internal) Business Processes
Private Business Processes are those internal to a specific organization.

Remark: The semantics of no value is not explicitly specified for private processes. However, the following is specified for public processes: For public Processes, no value has the same semantics as if the value
were false. ...
Therefore, the author assumes the same behavior for private processes."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PrivateNonExecutableProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:isExecutable ;
                                         owl:hasValue "false"^^xsd:boolean
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:isExecutable ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onDataRange xsd:boolean
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private (Internal) Business Processes
Private Business Processes are those internal to a specific organization.

Remark: The semantics of no value is not explicitly specified for private processes. However, the following is specified for public processes: For public Processes, no value has the same semantics as if the value
were false. ...
Therefore, the author assumes the same behavior for private processes."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#PrivateProcess
ext:PrivateProcess rdf:type owl:Class ;
                   owl:equivalentClass [ owl:intersectionOf ( base:Process
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:processType ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:Private
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ] ;
                   rdfs:subClassOf base:Process ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty base:processType ;
                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                     owl:onClass base:Private
                                   ] ;
                   owl:disjointWith ext:PublicProcess ;
                   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private Business Processes are those internal to a specific organization. These Processes have been generally
called workflow or BPM Processes (see Figure 10.4). Another synonym typically used in the Web services area is the
Orchestration of services. There are two (2) types of private Processes: executable and non-executable.""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PrivateProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Process
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:processType ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Private
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private (Internal) Business Processes
Private Business Processes are those internal to a specific organization."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PrivateProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:processType ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Private
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

Private (Internal) Business Processes
Private Business Processes are those internal to a specific organization."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#PublicProcess
ext:PublicProcess rdf:type owl:Class ;
                  owl:equivalentClass [ owl:intersectionOf ( base:Process
                                                             [ rdf:type owl:Restriction ;
                                                               owl:onProperty base:processType ;
                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                               owl:onClass base:Public
                                                             ]
                                                           ) ;
                                        rdf:type owl:Class
                                      ] ;
                  rdfs:subClassOf base:Process ,
                                  [ rdf:type owl:Class ;
                                    owl:complementOf [ rdf:type owl:Restriction ;
                                                       owl:onProperty base:isExecutable ;
                                                       owl:hasValue "true"^^xsd:boolean
                                                     ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:processType ;
                                    owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:Public
                                  ] ;
                  base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes

A public Process represents the interactions between a private Business Process and another Process or Participant (see Figure 10.5).""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PublicProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Process
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:processType ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Public
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes"""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PublicProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:complementOf [ rdf:type owl:Restriction ;
                                            owl:onProperty base:isExecutable ;
                                            owl:hasValue "true"^^xsd:boolean
                                          ]
                       ] ;
   base:bpmnSpecification """For public Processes, no value has the same semantics as if the value
were false. The value MAY not be true for public Processes."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:PublicProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:processType ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Public
                       ] ;
   base:bpmnSpecification """There are three basic types of BPMN Processes:
• Private Non-executable (internal) Business Processes
• Private Executable (internal) Business Processes
• Public Processes"""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#SequenceFlowConditional
ext:SequenceFlowConditional rdf:type owl:Class ;
                            owl:equivalentClass [ owl:intersectionOf ( base:SequenceFlow
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:conditionExpression ;
                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:Expression
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ] ;
                            rdfs:subClassOf base:SequenceFlow ,
                                            [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Class ;
                                                              owl:complementOf [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty base:sourceRef ;
                                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                 owl:onClass [ rdf:type owl:Class ;
                                                                                               owl:unionOf ( base:Activity
                                                                                                             base:ChoreographyActivity
                                                                                                           )
                                                                                             ]
                                                                               ]
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:sourceRef ;
                                                              owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:outgoing ;
                                                                                   owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                                                   owl:onClass base:SequenceFlow
                                                                                 ]
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty base:conditionExpression ;
                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                              owl:onClass base:Expression
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty base:sourceRef ;
                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                              owl:onClass [ rdf:type owl:Class ;
                                                            owl:unionOf ( base:EventBasedGateway
                                                                          base:ParallelGateway
                                                                        )
                                                          ]
                                            ] ;
                            base:bpmnSpecification """Table 7.2 - BPMN Extended Modeling Elements and Section 8.3.13 Sequence Flow.
There are two additional variations of Sequence Flows: 
• Conditional Sequence Flows
• Default Sequence Flows""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SequenceFlowConditional ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SequenceFlow
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:conditionExpression ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:Expression
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """Conditional flow: A Sequence Flow can have a condition Expression that are evaluated at runtime to determine whether or not the Sequence Flow will be used (i.e., will a token travel down the
Sequence Flow – see page 97). If the conditional flow is outgoing from an Activity, then the Sequence Flow will have a mini-diamond
at the beginning of the connector (see figure to the right). If the conditional flow is outgoing from a Gateway, then the line will not have a mini-diamond (see figure in the row above)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SequenceFlowConditional ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty base:sourceRef ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass [ rdf:type owl:Class ;
                                                                          owl:unionOf ( base:Activity
                                                                                        base:ChoreographyActivity
                                                                                      )
                                                                        ]
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:sourceRef ;
                                         owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:outgoing ;
                                                              owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "If a conditional Sequence Flow is used from a source Activity, then there MUST be at least one other outgoing Sequence Flow from that Activity."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SequenceFlowConditional ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:conditionExpression ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Expression
                       ] ;
   base:bpmnSpecification """Conditional flow: A Sequence Flow can have a condition Expression that are evaluated at runtime to determine whether or not the Sequence Flow will be used (i.e., will a token travel down the
Sequence Flow – see page 97). If the conditional flow is outgoing from an Activity, then the Sequence Flow will have a mini-diamond
at the beginning of the connector (see figure to the right). If the conditional flow is outgoing from a Gateway, then the line will not have a mini-diamond (see figure in the row above)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SequenceFlowConditional ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:sourceRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( base:EventBasedGateway
                                                     base:ParallelGateway
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Conditional outgoing Sequence Flows from a Gateway MUST NOT be drawn with a mini-diamond marker at the beginning of the connector. A source Gateway MUST NOT be of type Parallel or Event."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#SequenceFlowDefault
ext:SequenceFlowDefault rdf:type owl:Class ;
                        rdfs:subClassOf base:SequenceFlow ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty base:sourceRef ;
                                          owl:allValuesFrom [ rdf:type owl:Class ;
                                                              owl:unionOf ( base:Activity
                                                                            base:ChoreographyActivity
                                                                            base:ComplexGateway
                                                                            base:ExclusiveGateway
                                                                            base:InclusiveGateway
                                                                          )
                                                            ]
                                        ] ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty base:conditionExpression ;
                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:Expression
                                        ] ;
                        base:bpmnSpecification """Table 7.2 - BPMN Extended Modeling Elements and Section 8.3.13 Sequence Flow.
There are two additional variations of Sequence Flows: 
• Conditional Sequence Flows
• Default Sequence Flows""" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SequenceFlowDefault ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:sourceRef ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Activity
                                                           base:ChoreographyActivity
                                                           base:ComplexGateway
                                                           base:ExclusiveGateway
                                                           base:InclusiveGateway
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """For Data-Based Exclusive Gateways or Inclusive Gateways, one type of flow is the Default condition flow (see page 97). 
A Sequence Flow that has an Exclusive, Inclusive, or Complex Gateway or an Activity as its source can also be defined with as default.
Default Sequence Flows: For Exclusive Gateways, Inclusive Gateways, and Choreography Activities that have Conditional Sequence Flows, one of the outgoing Sequence Flows MAY be a Default Sequence Flow. """
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SequenceFlowDefault ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:conditionExpression ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Expression
                       ] ;
   base:bpmnSpecification "The default Sequence Flow should not have a conditionExpression. Any such Expression SHALL be ignored."
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#SequenceFlowNormal
ext:SequenceFlowNormal rdf:type owl:Class ;
                       rdfs:subClassOf base:SequenceFlow ;
                       base:bpmnSpecification "Table 7.2 - BPMN Extended Modeling Elements and Section 8.3.13 Sequence Flow." .


###  http://www.scch.at/ontologies/bpmn20.owl#SequentialMultiInstanceMarker
ext:SequentialMultiInstanceMarker rdf:type owl:Class ;
                                  rdfs:subClassOf ext:MultiInstanceMarker .


###  http://www.scch.at/ontologies/bpmn20.owl#SignalEvent
ext:SignalEvent rdf:type owl:Class ;
                owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                           [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitionRefs ;
                                                                                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                  [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitions ;
                                                                                                    owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                ) ;
                                                                             rdf:type owl:Class
                                                                           ]
                                                                           [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitionRefs ;
                                                                                                    owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                  [ rdf:type owl:Restriction ;
                                                                                                    owl:onProperty base:eventDefinitions ;
                                                                                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                    owl:onClass base:EventDefinition
                                                                                                  ]
                                                                                                ) ;
                                                                             rdf:type owl:Class
                                                                           ]
                                                                         )
                                                           ]
                                                           [ rdf:type owl:Class ;
                                                             owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitionRefs ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:SignalEventDefinition
                                                                           ]
                                                                           [ rdf:type owl:Restriction ;
                                                                             owl:onProperty base:eventDefinitions ;
                                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                             owl:onClass base:SignalEventDefinition
                                                                           ]
                                                                         )
                                                           ]
                                                         ) ;
                                      rdf:type owl:Class
                                    ] ,
                                    [ owl:intersectionOf ( base:Event
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:SignalEventMarker
                                                           ]
                                                         ) ;
                                      rdf:type owl:Class
                                    ] ;
                rdfs:subClassOf base:Event ,
                                [ rdf:type owl:Class ;
                                  owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitionRefs ;
                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitions ;
                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ]
                                                [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitionRefs ;
                                                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:eventDefinitions ;
                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                         owl:onClass base:EventDefinition
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Class ;
                                  owl:unionOf ( [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:eventDefinitionRefs ;
                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:SignalEventDefinition
                                                ]
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:eventDefinitions ;
                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:SignalEventDefinition
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasEventMarker ;
                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:SignalEventMarker
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:incomingMsgFlow ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:MessageFlow
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:outgoingMsgFlow ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:MessageFlow
                                ] ;
                base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:SignalEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:SignalEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is only one (1) EventDefinition associated with the Start
Event and that EventDefinition is of the subclass SignalEvent-
Definition, then the Event is a Signal Start Event and MUST be displayed
with a triangle marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:SignalEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.94 shows the variations of Signal Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass SignalEvent-
Definition, then the Event is a Signal Start Event and MUST be displayed
with a triangle marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SignalEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SignalEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass SignalEvent-
Definition, then the Event is a Signal Start Event and MUST be displayed
with a triangle marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:SignalEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.94 shows the variations of Signal Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#SignalEventInterrupting
ext:SignalEventInterrupting rdf:type owl:Class ;
                            owl:equivalentClass [ owl:intersectionOf ( ext:SignalEvent
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty base:isInterrupting ;
                                                                         owl:hasValue "true"^^xsd:boolean
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ] ;
                            rdfs:subClassOf ext:SignalEvent ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:usedAs ;
                                              owl:allValuesFrom [ rdf:type owl:Class ;
                                                                  owl:unionOf ( ext:StartEventEventSubProcess
                                                                                ext:StartEventNotEventSubProcess
                                                                                base:BoundaryEvent
                                                                                base:EndEvent
                                                                                base:IntermediateCatchEvent
                                                                                base:IntermediateThrowEvent
                                                                              )
                                                                ]
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty base:isInterrupting ;
                                              owl:hasValue "true"^^xsd:boolean
                                            ] ;
                            owl:disjointWith ext:SignalEventNonInterrupting ;
                            base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:SignalEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Signal Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Signal Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           ext:StartEventNotEventSubProcess
                                                           base:BoundaryEvent
                                                           base:EndEvent
                                                           base:IntermediateCatchEvent
                                                           base:IntermediateThrowEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Signal Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Signal Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#SignalEventMarker
ext:SignalEventMarker rdf:type owl:Class ;
                      rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#SignalEventNonInterrupting
ext:SignalEventNonInterrupting rdf:type owl:Class ;
                               owl:equivalentClass [ owl:intersectionOf ( ext:SignalEvent
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:isInterrupting ;
                                                                            owl:hasValue "false"^^xsd:boolean
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ] ;
                               rdfs:subClassOf ext:SignalEvent ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty ext:usedAs ;
                                                 owl:allValuesFrom [ rdf:type owl:Class ;
                                                                     owl:unionOf ( ext:StartEventEventSubProcess
                                                                                   base:BoundaryEvent
                                                                                 )
                                                                   ]
                                               ] ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:isInterrupting ;
                                                 owl:hasValue "false"^^xsd:boolean
                                               ] ;
                               base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:SignalEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Signal Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Signal Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:SignalEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Signal Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Signal Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#StandardLoopMarker
ext:StandardLoopMarker rdf:type owl:Class ;
                       rdfs:subClassOf ext:LoopMarker .


###  http://www.scch.at/ontologies/bpmn20.owl#StartEventEventSubProcess
ext:StartEventEventSubProcess rdf:type owl:Class ;
                              owl:equivalentClass [ owl:intersectionOf ( base:StartEvent
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty ext:isElementOf ;
                                                                           owl:someValuesFrom ext:EventSubProcess
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ] ;
                              rdfs:subClassOf base:StartEvent ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:isElementOf ;
                                                owl:someValuesFrom ext:EventSubProcess
                                              ] ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass [ rdf:type owl:Class ;
                                                              owl:unionOf ( ext:CompensationEventMarker
                                                                            ext:ConditionalEventMarker
                                                                            ext:ErrorEventMarker
                                                                            ext:EscalationEventMarker
                                                                            ext:MessageEventMarker
                                                                            ext:MultipleEventMarker
                                                                            ext:ParallelMultipleEventMarker
                                                                            ext:SignalEventMarker
                                                                            ext:TimerEventMarker
                                                                          )
                                                            ]
                                              ] ;
                              owl:disjointWith ext:StartEventNotEventSubProcess ;
                              base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:StartEventEventSubProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:StartEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:isElementOf ;
                                                owl:someValuesFrom ext:EventSubProcess
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:StartEventEventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:someValuesFrom ext:EventSubProcess
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:StartEventEventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CompensationEventMarker
                                                     ext:ConditionalEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:ParallelMultipleEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TimerEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification """The Start Event of an Event Sub-Process MUST have a defined trigger.
The Start Event trigger (EventDefinition) MUST be from the following types: Message, Error, Escalation, Compensation, Conditional, Signal, and Multiple (see page 26 for more details).

However, Table 10.93 mentiones two further possible StartEvents: Timer and Parallel Multiple."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#StartEventNotEventSubProcess
ext:StartEventNotEventSubProcess rdf:type owl:Class ;
                                 owl:equivalentClass [ owl:intersectionOf ( base:StartEvent
                                                                            [ rdf:type owl:Class ;
                                                                              owl:complementOf [ rdf:type owl:Restriction ;
                                                                                                 owl:onProperty ext:isElementOf ;
                                                                                                 owl:someValuesFrom ext:EventSubProcess
                                                                                               ]
                                                                            ]
                                                                          ) ;
                                                       rdf:type owl:Class
                                                     ] ;
                                 rdfs:subClassOf base:StartEvent ,
                                                 [ rdf:type owl:Class ;
                                                   owl:complementOf [ rdf:type owl:Restriction ;
                                                                      owl:onProperty ext:isElementOf ;
                                                                      owl:someValuesFrom ext:EventSubProcess
                                                                    ]
                                                 ] ,
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:isInterrupting ;
                                                   owl:hasValue "true"^^xsd:boolean
                                                 ] ;
                                 base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:StartEventNotEventSubProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:StartEvent
                                              [ rdf:type owl:Class ;
                                                owl:complementOf [ rdf:type owl:Restriction ;
                                                                   owl:onProperty ext:isElementOf ;
                                                                   owl:someValuesFrom ext:EventSubProcess
                                                                 ]
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:StartEventNotEventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:complementOf [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:isElementOf ;
                                            owl:someValuesFrom ext:EventSubProcess
                                          ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:StartEventNotEventSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#SuccessfulCompletion
ext:SuccessfulCompletion rdf:type owl:Class ;
                         rdfs:subClassOf ext:TransactionResultEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#TerminateEvent
ext:TerminateEvent rdf:type owl:Class ;
                   owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                              [ rdf:type owl:Class ;
                                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                       owl:onClass base:EventDefinition
                                                                                                     ]
                                                                                                     [ rdf:type owl:Restriction ;
                                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                       owl:onClass base:EventDefinition
                                                                                                     ]
                                                                                                   ) ;
                                                                                rdf:type owl:Class
                                                                              ]
                                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                       owl:onClass base:EventDefinition
                                                                                                     ]
                                                                                                     [ rdf:type owl:Restriction ;
                                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                       owl:onClass base:EventDefinition
                                                                                                     ]
                                                                                                   ) ;
                                                                                rdf:type owl:Class
                                                                              ]
                                                                            )
                                                              ]
                                                              [ rdf:type owl:Class ;
                                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                owl:onClass base:TerminateEventDefinition
                                                                              ]
                                                                              [ rdf:type owl:Restriction ;
                                                                                owl:onProperty base:eventDefinitions ;
                                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                owl:onClass base:TerminateEventDefinition
                                                                              ]
                                                                            )
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ] ,
                                       [ owl:intersectionOf ( base:Event
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:hasEventMarker ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass ext:TerminateEventMarker
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ] ;
                   rdfs:subClassOf base:Event ,
                                   [ rdf:type owl:Class ;
                                     owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitionRefs ;
                                                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:EventDefinition
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitions ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:EventDefinition
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ]
                                                   [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitionRefs ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:EventDefinition
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitions ;
                                                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:EventDefinition
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Class ;
                                     owl:unionOf ( [ rdf:type owl:Restriction ;
                                                     owl:onProperty base:eventDefinitionRefs ;
                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                     owl:onClass base:TerminateEventDefinition
                                                   ]
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty base:eventDefinitions ;
                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                     owl:onClass base:TerminateEventDefinition
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty ext:hasEventMarker ;
                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                     owl:onClass ext:TerminateEventMarker
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty ext:incomingMsgFlow ;
                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                     owl:onClass base:MessageFlow
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty ext:outgoingMsgFlow ;
                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                     owl:onClass base:MessageFlow
                                   ] ;
                   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:TerminateEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:TerminateEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:TerminateEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.95 shows the Terminate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:TerminateEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:TerminateEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """The types of Event Definitions are:
CancelEventDefinition, CompensationEventDefinition, ConditionalEventDefinition, ErrorEventDefinition, EscalationEventDefinition, MessageEventDefinition, LinkEventDefinition, SignalEventDefinition, TerminateEventDefinition, .."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:TerminateEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.95 shows the Terminate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#TerminateEventInterrupting
ext:TerminateEventInterrupting rdf:type owl:Class ;
                               owl:equivalentClass [ owl:intersectionOf ( ext:TerminateEvent
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:isInterrupting ;
                                                                            owl:hasValue "true"^^xsd:boolean
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ] ;
                               rdfs:subClassOf ext:TerminateEvent ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty ext:usedAs ;
                                                 owl:allValuesFrom base:EndEvent
                                               ] ,
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:isInterrupting ;
                                                 owl:hasValue "true"^^xsd:boolean
                                               ] ;
                               base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:TerminateEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom base:EndEvent
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TerminateEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#TerminateEventMarker
ext:TerminateEventMarker rdf:type owl:Class ;
                         rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#TimerEvent
ext:TimerEvent rdf:type owl:Class ;
               owl:equivalentClass [ owl:intersectionOf ( base:Event
                                                          [ rdf:type owl:Class ;
                                                            owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitionRefs ;
                                                                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                                 [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitions ;
                                                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                               ) ;
                                                                            rdf:type owl:Class
                                                                          ]
                                                                          [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitionRefs ;
                                                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                                 [ rdf:type owl:Restriction ;
                                                                                                   owl:onProperty base:eventDefinitions ;
                                                                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                   owl:onClass base:EventDefinition
                                                                                                 ]
                                                                                               ) ;
                                                                            rdf:type owl:Class
                                                                          ]
                                                                        )
                                                          ]
                                                          [ rdf:type owl:Class ;
                                                            owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitionRefs ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:TimerEventDefinition
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:eventDefinitions ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:TimerEventDefinition
                                                                          ]
                                                                        )
                                                          ]
                                                        ) ;
                                     rdf:type owl:Class
                                   ] ,
                                   [ owl:intersectionOf ( base:Event
                                                          [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:TimerEventMarker
                                                          ]
                                                        ) ;
                                     rdf:type owl:Class
                                   ] ;
               rdfs:subClassOf base:Event ,
                               [ rdf:type owl:Class ;
                                 owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitionRefs ;
                                                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitions ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                    ) ;
                                                 rdf:type owl:Class
                                               ]
                                               [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitionRefs ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:eventDefinitions ;
                                                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:EventDefinition
                                                                      ]
                                                                    ) ;
                                                 rdf:type owl:Class
                                               ]
                                             )
                               ] ,
                               [ rdf:type owl:Class ;
                                 owl:unionOf ( [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:eventDefinitionRefs ;
                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:TimerEventDefinition
                                               ]
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty base:eventDefinitions ;
                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:TimerEventDefinition
                                               ]
                                             )
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:hasEventMarker ;
                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                 owl:onClass ext:TimerEventMarker
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:incomingMsgFlow ;
                                 owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                 owl:onClass base:MessageFlow
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:outgoingMsgFlow ;
                                 owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                 owl:onClass base:MessageFlow
                               ] ;
               base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                              [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitionRefs ;
                                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                     [ rdf:type owl:Restriction ;
                                                                                       owl:onProperty base:eventDefinitions ;
                                                                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                       owl:onClass base:EventDefinition
                                                                                     ]
                                                                                   ) ;
                                                                rdf:type owl:Class
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:TimerEventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:TimerEventDefinition
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is only one (1) EventDefinition associated with the Start
Event and that EventDefinition is of the subclass TimerEventDefinition,
then the Event is a Timer Start Event and MUST be displayed
with a clock marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:Event
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:TimerEventMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "Figure 10.96 shows the variations of Timer Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitionRefs ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:eventDefinitions ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass TimerEventDefinition,
then the Event is a Timer Start Event and MUST be displayed
with a clock marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitionRefs ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:TimerEventDefinition
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:eventDefinitions ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:TimerEventDefinition
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is only one EventDefinition associated with the Start
Event and that EventDefinition is of the subclass TimerEventDefinition,
then the Event is a Timer Start Event and MUST be displayed
with a clock marker (see the figure to the right)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:TimerEventMarker
                       ] ;
   base:bpmnSpecification "Figure 10.96 shows the variations of Timer Events."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Table 7.4 – Message Flow Connection Rules"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows.
The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#TimerEventInterrupting
ext:TimerEventInterrupting rdf:type owl:Class ;
                           owl:equivalentClass [ owl:intersectionOf ( ext:TimerEvent
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:isInterrupting ;
                                                                        owl:hasValue "true"^^xsd:boolean
                                                                      ]
                                                                    ) ;
                                                 rdf:type owl:Class
                                               ] ;
                           rdfs:subClassOf ext:TimerEvent ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:usedAs ;
                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                 owl:unionOf ( ext:StartEventEventSubProcess
                                                                               ext:StartEventNotEventSubProcess
                                                                               base:BoundaryEvent
                                                                               base:IntermediateCatchEvent
                                                                             )
                                                               ]
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty base:isInterrupting ;
                                             owl:hasValue "true"^^xsd:boolean
                                           ] ;
                           owl:disjointWith ext:TimerEventNonInterrupting ;
                           base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEventInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:TimerEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "true"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Timer Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Timer Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           ext:StartEventNotEventSubProcess
                                                           base:BoundaryEvent
                                                           base:IntermediateCatchEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEventInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Timer Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Timer Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#TimerEventMarker
ext:TimerEventMarker rdf:type owl:Class ;
                     rdfs:subClassOf ext:EventMarkerEnumeration .


###  http://www.scch.at/ontologies/bpmn20.owl#TimerEventNonInterrupting
ext:TimerEventNonInterrupting rdf:type owl:Class ;
                              owl:equivalentClass [ owl:intersectionOf ( ext:TimerEvent
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:isInterrupting ;
                                                                           owl:hasValue "false"^^xsd:boolean
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ] ;
                              rdfs:subClassOf ext:TimerEvent ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:usedAs ;
                                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                                    owl:unionOf ( ext:StartEventEventSubProcess
                                                                                  base:BoundaryEvent
                                                                                )
                                                                  ]
                                              ] ,
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ] ;
                              base:bpmnSpecification "Table 10.93 – Types of Events and their Markers" .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEventNonInterrupting ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( ext:TimerEvent
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:isInterrupting ;
                                                owl:hasValue "false"^^xsd:boolean
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """For a Timer Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Timer Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:usedAs ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:StartEventEventSubProcess
                                                           base:BoundaryEvent
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource ext:TimerEventNonInterrupting ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """For a Timer Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Timer Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false."""
 ] .


###  http://www.scch.at/ontologies/bpmn20.owl#TransactionResultEnumeration
ext:TransactionResultEnumeration rdf:type owl:Class ;
                                 owl:equivalentClass [ rdf:type owl:Class ;
                                                       owl:unionOf ( ext:FailedCompletion
                                                                     ext:Hazard
                                                                     ext:SuccessfulCompletion
                                                                   )
                                                     ] ;
                                 rdfs:subClassOf base:Enumerations ;
                                 base:bpmnSpecification """There are three basic outcomes of a Transaction:
1. Successful completion: ...
2. Failed completion (Cancel): ...
3. Hazard: ...""" .


###  http://www.scch.at/ontologies/bpmn20base.owl#Activity
base:Activity rdfs:subClassOf [ rdf:type owl:Restriction ;
                                owl:onProperty ext:incomingMsgFlow ;
                                owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:outgoingMsgFlow ;
                                owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Activity ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "An Activity MAY be the target of a Message Flow; it can have zero (0) or more incoming Message Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Activity ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "An Activity MAY be a source of a Message Flow; it can have zero (0) or more outgoing Message Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#AdHocSubProcess
base:AdHocSubProcess owl:equivalentClass [ owl:intersectionOf ( base:SubProcess
                                                                [ rdf:type owl:Restriction ;
                                                                  owl:onProperty ext:hasMarker ;
                                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                  owl:onClass ext:AdHocMarker
                                                                ]
                                                              ) ;
                                           rdf:type owl:Class
                                         ] ;
                     rdfs:subClassOf [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:allValuesFrom [ rdf:type owl:Class ;
                                                           owl:unionOf ( [ rdf:type owl:Class ;
                                                                           owl:complementOf base:BoundaryEvent
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty ext:hasEventMarker ;
                                                                           owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass ext:CancelEventMarker
                                                                         ]
                                                                       )
                                                         ]
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:allValuesFrom [ rdf:type owl:Class ;
                                                           owl:unionOf ( [ rdf:type owl:Class ;
                                                                           owl:complementOf base:EndEvent
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty ext:hasEventMarker ;
                                                                           owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass ext:CancelEventMarker
                                                                         ]
                                                                       )
                                                         ]
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Association
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:DataAssociation
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:DataObject
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Group
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:IntermediateCatchEvent
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:IntermediateThrowEvent
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Activity
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:ChoreographyActivity
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Conversation
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:ConversationLink
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:EndEvent
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:StartEvent
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasMarker ;
                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                       owl:onClass ext:AdHocMarker
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty base:triggeredByEvent ;
                                       owl:hasValue "false"^^xsd:boolean
                                     ] ;
                     base:bpmnSpecification "An Ad-Hoc Sub-Process is a specialized type of Sub-Process that is a group of Activities that have no REQUIRED sequence relationships. A set of Activities can be defined for the Process, but the sequence and number of performances for the Activities is determined by the performers of the Activities." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty owl:equivalentClass ;
   owl:annotatedTarget [ owl:intersectionOf ( base:SubProcess
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:AdHocMarker
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification "A Sub-Process is marked as being ad-hoc with a “tilde” symbol placed at the bottom center of the Sub-Process shape (see Figure 10.35 and Figure 10.36)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:BoundaryEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "The Cancel Intermediate Event can only be used when attached to the boundary of a Transaction Sub-Process. It cannot be used in any normal flow and cannot be attached to a non-Transaction Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:EndEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Cancel: This type of End is used within a Transaction Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Association
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow, Association, Data Association, Group, Message Flow (as a source or target), Gateway, and Intermediate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataAssociation
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow, Association, Data Association, Group, Message Flow (as a source or target), Gateway, and Intermediate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObject
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow, Association, Data Association, Group, Message Flow (as a source or target), Gateway, and Intermediate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Group
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow, Association, Data Association, Group, Message Flow (as a source or target), Gateway, and Intermediate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:IntermediateCatchEvent
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow, Association, Data Association, Group, Message Flow (as a source or target), Gateway, and Intermediate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:IntermediateThrowEvent
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MAY be used in an Ad-Hoc Sub-Process: Data Object, Sequence Flow, Association, Data Association, Group, Message Flow (as a source or target), Gateway, and Intermediate Event."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Activity
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MUST be used in an Ad-Hoc Sub-Process: Activity."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ChoreographyActivity
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MUST NOT be used in an Ad-Hoc Sub-Process: Start Event, End Event, Conversations (graphically), Conversation Links (graphically), and Choreography Activities."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Conversation
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MUST NOT be used in an Ad-Hoc Sub-Process: Start Event, End Event, Conversations (graphically), Conversation Links (graphically), and Choreography Activities."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ConversationLink
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MUST NOT be used in an Ad-Hoc Sub-Process: Start Event, End Event, Conversations (graphically), Conversation Links (graphically), and Choreography Activities."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EndEvent
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MUST NOT be used in an Ad-Hoc Sub-Process: Start Event, End Event, Conversations (graphically), Conversation Links (graphically), and Choreography Activities."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:StartEvent
                       ] ;
   base:bpmnSpecification "The list of BPMN elements that MUST NOT be used in an Ad-Hoc Sub-Process: Start Event, End Event, Conversations (graphically), Conversation Links (graphically), and Choreography Activities."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:AdHocMarker
                       ] ;
   base:bpmnSpecification "A Sub-Process is marked as being ad-hoc with a “tilde” symbol placed at the bottom center of the Sub-Process shape (see Figure 10.35 and Figure 10.36)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:AdHocSubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:triggeredByEvent ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """A flag that identifies whether this Sub-Process is an Event Sub-Process.
• If false, then this Sub-Process is a normal Sub-Process.
• If true, then this Sub-Process is an Event Sub-Process and is
subject to additional constraints (see page 176)."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Artifact
base:Artifact rdfs:subClassOf [ rdf:type owl:Restriction ;
                                owl:onProperty ext:isElementOf ;
                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                    owl:unionOf ( base:Collaboration
                                                                  base:FlowElementsContainer
                                                                )
                                                  ]
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:incomingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:outgoingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty base:incoming ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:SequenceFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty base:outgoing ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:SequenceFlow
                              ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Artifact ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Collaboration
                                                           base:FlowElementsContainer
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """When an Artifact is defined it is contained within a Collaboration
or a FlowElementsContainer (a Process or Choreography)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Artifact ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "An Artifact MUST NOT be a target for a Message Flow."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Artifact ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "An Artifact MUST NOT be a source for a Message Flow."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Artifact ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "An Artifact MUST NOT be a target for a Sequence Flow."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Artifact ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "An Artifact MUST NOT be a source for a Sequence Flow."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#BoundaryEvent
base:BoundaryEvent rdfs:subClassOf [ rdf:type owl:Class ;
                                     owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:outgoing ;
                                                                            owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:SequenceFlow
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty ext:hasEventMarker ;
                                                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass ext:CompensationEventMarker
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ]
                                                   [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty ext:hasEventMarker ;
                                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass ext:CompensationEventMarker
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:outgoing ;
                                                                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                            owl:onClass base:SequenceFlow
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Class ;
                                     owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:cancelActivity ;
                                                                            owl:hasValue "false"^^xsd:boolean
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:isInterrupting ;
                                                                            owl:hasValue "false"^^xsd:boolean
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ]
                                                   [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:cancelActivity ;
                                                                            owl:hasValue "true"^^xsd:boolean
                                                                          ]
                                                                          [ rdf:type owl:Restriction ;
                                                                            owl:onProperty base:isInterrupting ;
                                                                            owl:hasValue "true"^^xsd:boolean
                                                                          ]
                                                                        ) ;
                                                     rdf:type owl:Class
                                                   ]
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty ext:hasEventMarker ;
                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                     owl:onClass ext:CompensationEventMarker
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Class ;
                                     owl:unionOf ( [ rdf:type owl:Class ;
                                                     owl:complementOf [ rdf:type owl:Restriction ;
                                                                        owl:onProperty ext:hasEventMarker ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass ext:CancelEventMarker
                                                                      ]
                                                   ]
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty base:attachedTo ;
                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                     owl:onClass base:Transaction
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Class ;
                                     owl:unionOf ( [ rdf:type owl:Restriction ;
                                                     owl:onProperty ext:outgoingAssociation ;
                                                     owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                     owl:onClass base:Association
                                                   ]
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty ext:hasEventMarker ;
                                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                     owl:onClass ext:CompensationEventMarker
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Class ;
                                     owl:unionOf ( [ rdf:type owl:Restriction ;
                                                     owl:onProperty ext:incomingMsgFlow ;
                                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                     owl:onClass base:MessageFlow
                                                   ]
                                                   [ rdf:type owl:Restriction ;
                                                     owl:onProperty ext:outgoingMsgFlow ;
                                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                     owl:onClass base:MessageFlow
                                                   ]
                                                 )
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty ext:hasEventMarker ;
                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                     owl:onClass [ rdf:type owl:Class ;
                                                   owl:unionOf ( ext:CancelEventMarker
                                                                 ext:CompensationEventMarker
                                                                 ext:ConditionalEventMarker
                                                                 ext:ErrorEventMarker
                                                                 ext:EscalationEventMarker
                                                                 ext:MessageEventMarker
                                                                 ext:MultipleEventMarker
                                                                 ext:ParallelMultipleEventMarker
                                                                 ext:SignalEventMarker
                                                                 ext:TimerEventMarker
                                                               )
                                                 ]
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty base:incoming ;
                                     owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                     owl:onClass base:SequenceFlow
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty ext:incomingMsgFlow ;
                                     owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                     owl:onClass base:MessageFlow
                                   ] ,
                                   [ rdf:type owl:Restriction ;
                                     owl:onProperty ext:outgoingMsgFlow ;
                                     owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                     owl:onClass base:MessageFlow
                                   ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:outgoing ;
                                                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:SequenceFlow
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:hasEventMarker ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass ext:CompensationEventMarker
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:hasEventMarker ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass ext:CompensationEventMarker
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:outgoing ;
                                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:SequenceFlow
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """The Intermediate Event MUST be a source for a Sequence Flow.
* Multiple Sequence Flows MAY originate from an Intermediate Event. For each Sequence Flow that has the Intermediate Event as a source, a new parallel path SHALL be generated.
** An exception to this: an Intermediate Event with a Compensation trigger MUST NOT have an outgoing Sequence Flow (it MAY have an outgoing Association)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:cancelActivity ;
                                                                owl:hasValue "false"^^xsd:boolean
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:isInterrupting ;
                                                                owl:hasValue "false"^^xsd:boolean
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:cancelActivity ;
                                                                owl:hasValue "true"^^xsd:boolean
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:isInterrupting ;
                                                                owl:hasValue "true"^^xsd:boolean
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:CompensationEventMarker
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """For a Message Event that interrupts the Activity to which it is attached,
the boundary of the Event is solid (see upper figure on the right). Note
that if using this notation, the attribute cancelActivity of the Activity
to which the Event is attached is implicitly set to true.
For a Message Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false.

For a Timer Event that interrupts the Activity to which it is attached, the
boundary of the Event is solid (see upper figure on the right). Note that if using this notation, the attribute cancelActivity of the Activity to
which the Event is attached is implicitly set to true.
For a Timer Event that does not interrupt the Activity to which it is
attached, the boundary of the Event is dashed (see lower figure on the
right). Note that if using this notation, the attribute cancelActivity of
the Activity to which the Event is attached is implicitly set to false.

Annotation: Similarily described for other event triggers, except CompensationEvent:
cancelActivity: This attribute cannot be applied to ... Compensation Events (where it doesn’t apply).

Note that the interrupting a non-interrupting aspect of other Events does not apply in the case of a Compensation Event. Compensations can only be triggered after completion of the Activity to which they are
attached. Thus they cannot interrupt the Activity. The boundary of the
Event is always solid."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:CancelEventMarker
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:attachedTo ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:Transaction
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """An Intermediate Event with a Cancel trigger MAY be attached to a Sub-Process boundary only if the Transaction attribute of the Sub-Process is set to true.

The catch Cancel Intermediate Event MUST only be attached to the boundary of a Transaction Sub-Process and, thus, MAY NOT be used in normal flow."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:outgoingAssociation ;
                                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:Association
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:CompensationEventMarker
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "An exception to this: an Intermediate Event with a Compensation trigger MUST NOT have an outgoing Sequence Flow (it MAY have an outgoing Association)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:incomingMsgFlow ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:outgoingMsgFlow ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY have an incoming Message Flow or an outgoing Message Flow, but not both."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CancelEventMarker
                                                     ext:CompensationEventMarker
                                                     ext:ConditionalEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:ParallelMultipleEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TimerEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification """Table 10.93 – Types of Events and their Markers

To be attached to the boundary of an Activity, an Intermediate Event MUST be one of the following triggers (EventDefinition): Message, Timer, Error, Escalation, Cancel, Compensation, Conditional, Signal, Multiple, and Parallel Multiple."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "BoundaryEvent: The Intermediate Event MUST NOT be a target for a Sequence Flow; it cannot have an incoming Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY be the target for a Message Flow; it can have one incoming Message Flow."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:BoundaryEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY be a source for a Message Flow; it can have one outgoing Message Flow."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#CallConversation
base:CallConversation rdfs:subClassOf [ rdf:type owl:Restriction ;
                                        owl:onProperty base:calledCollaborationRef ;
                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                        owl:onClass base:Choreography
                                      ] ,
                                      [ rdf:type owl:Restriction ;
                                        owl:onProperty base:messageFlowRefs ;
                                        owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                        owl:onClass base:MessageFlow
                                      ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:CallConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:calledCollaborationRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Choreography
                       ] ;
   base:bpmnSpecification """The element to be called, which MAY be either a Collaboration or a
GlobalConversation. The called element MUST NOT be a
Choreography or a GlobalChoreographyTask (which are subtypes
of Collaboration).

Annotation: GlobalChoreographyTask need not be mentioned since it is a subclass of Choreography."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:CallConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:messageFlowRefs ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "Note - The ConversationNode attribute messageFlowRef doesn't apply to Call Conversations."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#CatchEvent
base:CatchEvent rdfs:subClassOf [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasEventMarker ;
                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass [ rdf:type owl:Class ;
                                                owl:unionOf ( ext:CancelEventMarker
                                                              ext:CompensationEventMarker
                                                              ext:ConditionalEventMarker
                                                              ext:ErrorEventMarker
                                                              ext:EscalationEventMarker
                                                              ext:LinkEventMarker
                                                              ext:MessageEventMarker
                                                              ext:MultipleEventMarker
                                                              ext:NoneEventMarker
                                                              ext:ParallelMultipleEventMarker
                                                              ext:SignalEventMarker
                                                              ext:TimerEventMarker
                                                            )
                                              ]
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:CatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CancelEventMarker
                                                     ext:CompensationEventMarker
                                                     ext:ConditionalEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:LinkEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:NoneEventMarker
                                                     ext:ParallelMultipleEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TimerEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Overview in Table 7.2, Type Dimension"
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Choreography
base:Choreography rdfs:subClassOf [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Class ;
                                                                        owl:complementOf base:BoundaryEvent
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty ext:hasEventMarker ;
                                                                        owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( ext:CancelEventMarker
                                                                                                          ext:CompensationEventMarker
                                                                                                          ext:ConditionalEventMarker
                                                                                                          ext:MessageEventMarker
                                                                                                          ext:MultipleEventMarker
                                                                                                          ext:SignalEventMarker
                                                                                                          ext:TimerEventMarker
                                                                                                        )
                                                                                          ]
                                                                      ]
                                                                    )
                                                      ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Class ;
                                                                        owl:complementOf base:EndEvent
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty ext:hasEventMarker ;
                                                                        owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( ext:NoneEventMarker
                                                                                                          ext:TerminateEventMarker
                                                                                                        )
                                                                                          ]
                                                                      ]
                                                                    )
                                                      ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Class ;
                                                                        owl:complementOf base:IntermediateCatchEvent
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty ext:hasEventMarker ;
                                                                        owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( ext:ConditionalEventMarker
                                                                                                          ext:LinkEventMarker
                                                                                                          ext:MultipleEventMarker
                                                                                                          ext:SignalEventMarker
                                                                                                          ext:TimerEventMarker
                                                                                                        )
                                                                                          ]
                                                                      ]
                                                                    )
                                                      ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Class ;
                                                                        owl:complementOf base:IntermediateThrowEvent
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty ext:hasEventMarker ;
                                                                        owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( ext:LinkEventMarker
                                                                                                          ext:NoneEventMarker
                                                                                                        )
                                                                                          ]
                                                                      ]
                                                                    )
                                                      ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Class ;
                                                                        owl:complementOf base:StartEvent
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty ext:hasEventMarker ;
                                                                        owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( ext:ConditionalEventMarker
                                                                                                          ext:MultipleEventMarker
                                                                                                          ext:NoneEventMarker
                                                                                                          ext:SignalEventMarker
                                                                                                          ext:TimerEventMarker
                                                                                                        )
                                                                                          ]
                                                                      ]
                                                                    )
                                                      ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:allValuesFrom [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Class ;
                                                                        owl:complementOf base:StartEvent
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:isInterrupting ;
                                                                        owl:hasValue "true"^^xsd:boolean
                                                                      ]
                                                                    )
                                                      ]
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:BoundaryEvent
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:ChoreographyActivity
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:Gateway
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:IntermediateCatchEvent
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:IntermediateThrowEvent
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:SequenceFlow
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:artifacts ;
                                    owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:Artifact
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:Activity
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:DataAssociation
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:DataObject
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:DataObjectReference
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty ext:hasElement ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:Lane
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:choreographyRef ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:Choreography
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:laneSets ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass base:LaneSet
                                  ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:BoundaryEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:CancelEventMarker
                                                                                               ext:CompensationEventMarker
                                                                                               ext:ConditionalEventMarker
                                                                                               ext:MessageEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TimerEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 11.7 - Use of Intermediate Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:EndEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:NoneEventMarker
                                                                                               ext:TerminateEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 11.8 – Use of End Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:IntermediateCatchEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:ConditionalEventMarker
                                                                                               ext:LinkEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TimerEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 11.7 - Use of Intermediate Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:IntermediateThrowEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:LinkEventMarker
                                                                                               ext:NoneEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 11.7 - Use of Intermediate Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:ConditionalEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:NoneEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TimerEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 11.6 – Use of Start Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:isInterrupting ;
                                                             owl:hasValue "true"^^xsd:boolean
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Start Event attributes isInterrupting:
This attribute only applies to Start Events of Event Sub-Processes; it is ignored for other Start Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:BoundaryEvent
                       ] ;
   base:bpmnSpecification "Table 11.7 - Use of Intermediate Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ChoreographyActivity
                       ] ;
   base:bpmnSpecification "When Choreography Activities are defined they are contained within a Choreography or a Sub-Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Gateway
                       ] ;
   base:bpmnSpecification """The Choreography looks similar to a private Business Process since it consists of a network of Activities, Events, and Gateways (see Figure 7.4).
Remark: Activities refer to ChoreographyActivities, not normal Activities."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:IntermediateCatchEvent
                       ] ;
   base:bpmnSpecification "Table 11.7 - Use of Intermediate Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:IntermediateThrowEvent
                       ] ;
   base:bpmnSpecification "Table 11.7 - Use of Intermediate Events in Choreography"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "Sequence Flows are used within Choreographies to show the sequence of the Choreography Activities"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:artifacts ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Artifact
                       ] ;
   base:bpmnSpecification """When an Artifact is defined it is contained within a Collaboration
or a FlowElementsContainer (a Process or Choreography)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Activity
                       ] ;
   base:bpmnSpecification "Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataAssociation
                       ] ;
   base:bpmnSpecification "Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObject
                       ] ;
   base:bpmnSpecification "Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObjectReference
                       ] ;
   base:bpmnSpecification """Data Object References are a way to reuse Data Objects in the same diagram.
Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Lane
                       ] ;
   base:bpmnSpecification "Swimlanes, both Pools and Lanes, are not used in Choreographies."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:choreographyRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Choreography
                       ] ;
   base:bpmnSpecification "Collaboration has attribute choreographyRef but according to BPMN Spec.: Attribute is not applicable for Choreography or GlobalConversation which are a subtypes of Collaboration."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Choreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:laneSets ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:LaneSet
                       ] ;
   base:bpmnSpecification "LaneSets are not used for Choreographies or Sub-Choreographies."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#ChoreographyActivity
base:ChoreographyActivity rdfs:subClassOf [ rdf:type owl:Restriction ;
                                            owl:onProperty ext:isElementOf ;
                                            owl:allValuesFrom [ rdf:type owl:Class ;
                                                                owl:unionOf ( base:Choreography
                                                                              base:SubChoreography
                                                                            )
                                                              ]
                                          ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ChoreographyActivity ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Choreography
                                                           base:SubChoreography
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "When Choreography Activities are defined they are contained within a Choreography or a Sub-Choreography, which are FlowElementContainers (other FlowElementContainers are not allowed to contain Choreography Activities)."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#ChoreographyTask
base:ChoreographyTask rdfs:subClassOf [ rdf:type owl:Restriction ;
                                        owl:onProperty ext:hasMarker ;
                                        owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                        owl:onClass [ rdf:type owl:Class ;
                                                      owl:unionOf ( ext:MultiInstanceMarker
                                                                    ext:StandardLoopMarker
                                                                  )
                                                    ]
                                      ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ChoreographyTask ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:MultiInstanceMarker
                                                     ext:StandardLoopMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification """As with a standard Orchestration Task, the Choreography Task MAY have internal markers to show how the Choreography Task MAY be repeated. There are two types of internal markers (see Figure 11.12): 
A Choreography Task MAY have only one of the three markers at one time.
The marker for a Choreography Task that is a standard loop MUST be ..
The marker for a Choreography Task that is parallel multi-instance MUST be ..
The marker for a Choreography Task that is sequential multi-instance MUST be .."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#ConversationLink
base:ConversationLink rdfs:subClassOf [ rdf:type owl:Class ;
                                        owl:unionOf ( [ rdf:type owl:Restriction ;
                                                        owl:onProperty base:sourceRef ;
                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                        owl:onClass base:ConversationNode
                                                      ]
                                                      [ rdf:type owl:Restriction ;
                                                        owl:onProperty base:targetRef ;
                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                        owl:onClass base:ConversationNode
                                                      ]
                                                    )
                                      ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ConversationLink ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:sourceRef ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ConversationNode
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:targetRef ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ConversationNode
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """A Conversation Link MUST connect to exactly one ConversationNode. If the sourceRef is not a ConversationNode, then the targetRef MUST be a ConversationNode.

A Conversation Link MUST connect to exactly one ConversationNode. If the targetRef is not a ConversationNode, then the sourceRef MUST be a ConversationNode."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#DataAssociation
base:DataAssociation rdfs:subClassOf [ rdf:type owl:Class ;
                                       owl:unionOf ( [ rdf:type owl:Restriction ;
                                                       owl:onProperty base:transformation ;
                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                       owl:onClass base:Expression
                                                     ]
                                                     [ rdf:type owl:Restriction ;
                                                       owl:onProperty base:sourceRef ;
                                                       owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                       owl:onClass base:ItemAwareElement
                                                     ]
                                                   )
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:isElementOf ;
                                       owl:allValuesFrom [ rdf:type owl:Class ;
                                                           owl:unionOf ( base:Activity
                                                                         base:Event
                                                                       )
                                                         ]
                                     ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataAssociation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:transformation ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:Expression
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:sourceRef ;
                                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ItemAwareElement
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If there is no transformation defined or referenced, then only one source MUST be defined, and the contents of this source
will be copied into the target."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataAssociation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Activity
                                                           base:Event
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "The DataAssociation class is a BaseElement contained by an Activity or Event, used to model how data is pushed into or pulled from item-aware elements."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#DataInput
base:DataInput rdfs:subClassOf [ rdf:type owl:Class ;
                                 owl:unionOf ( [ rdf:type owl:Class ;
                                                 owl:unionOf ( base:Event
                                                               [ rdf:type owl:Restriction ;
                                                                 owl:onProperty ext:isElementOf ;
                                                                 owl:someValuesFrom base:Activity
                                                               ]
                                                             )
                                               ]
                                               [ rdf:type owl:Restriction ;
                                                 owl:onProperty ext:incomingDataAssociation ;
                                                 owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                 owl:onClass base:DataAssociation
                                               ]
                                             )
                               ] ,
                               [ rdf:type owl:Restriction ;
                                 owl:onProperty ext:incomingDataAssociation ;
                                 owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                 owl:onClass base:DataAssociation
                               ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataInput ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:unionOf ( base:Event
                                                       [ rdf:type owl:Restriction ;
                                                         owl:onProperty ext:isElementOf ;
                                                         owl:someValuesFrom base:Activity
                                                       ]
                                                     )
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:incomingDataAssociation ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:DataAssociation
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "If the Data Input is directly contained by the top-level Process, it MUST not be the target of Data Associations within the underlying model. Only Data Inputs that are contained by Activities or Events MAY be the target of Data Associations in the model."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataInput ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingDataAssociation ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataAssociation
                       ] ;
   base:bpmnSpecification "Data Inputs MAY have incoming Data Associations."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#DataObject
base:DataObject rdfs:subClassOf [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:isElementOf ;
                                  owl:allValuesFrom [ rdf:type owl:Class ;
                                                      owl:unionOf ( base:Process
                                                                    base:SubProcess
                                                                  )
                                                    ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:MultiInstanceParallel
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataObject ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Process
                                                           base:SubProcess
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "The Data Object class is an item-aware element. Data Object elements MUST be contained within Process or Sub-Process elements."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataObject ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MultiInstanceParallel
                       ] ;
   base:bpmnSpecification """A DataObject element that references an ItemDefinition marked as collection has to be visualized differently,
compared to single instance data structures. The notation looks as follows:
...
Collection (see Figure 10.53)
...
Figure 10.53 - A DataObject that is a collection"""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#DataObjectReference
base:DataObjectReference rdfs:subClassOf [ rdf:type owl:Restriction ;
                                           owl:onProperty ext:isElementOf ;
                                           owl:allValuesFrom [ rdf:type owl:Class ;
                                                               owl:unionOf ( base:Process
                                                                             base:SubProcess
                                                                           )
                                                             ]
                                         ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataObjectReference ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Process
                                                           base:SubProcess
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "The Data Object class is an item-aware element. Data Object elements MUST be contained within Process or Sub-Process elements. Data Object elements are visually displayed on a Process diagram. Data Object References are a way to reuse Data Objects in the same diagram."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#DataOutput
base:DataOutput rdfs:subClassOf [ rdf:type owl:Class ;
                                  owl:unionOf ( [ rdf:type owl:Class ;
                                                  owl:unionOf ( base:Event
                                                                [ rdf:type owl:Restriction ;
                                                                  owl:onProperty ext:isElementOf ;
                                                                  owl:someValuesFrom base:Activity
                                                                ]
                                                              )
                                                ]
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty ext:outgoingDataAssociation ;
                                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:DataAssociation
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:outgoingDataAssociation ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:DataAssociation
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataOutput ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:unionOf ( base:Event
                                                       [ rdf:type owl:Restriction ;
                                                         owl:onProperty ext:isElementOf ;
                                                         owl:someValuesFrom base:Activity
                                                       ]
                                                     )
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:outgoingDataAssociation ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:DataAssociation
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If the Data Output is directly contained by the top-level Process, it MUST not be the source of Data Associations within the underlying model. Only Data Outputs that are contained by Activities or Events
MAY be the target of Data Associations in the model."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:DataOutput ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingDataAssociation ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataAssociation
                       ] ;
   base:bpmnSpecification "Data Outputs MAY have outgoing DataAssociations."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#EndEvent
base:EndEvent rdfs:subClassOf [ rdf:type owl:Class ;
                                owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:isElementOf ;
                                                                       owl:someValuesFrom ext:ExpandedSubProcess
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:isAttachedToBoundary ;
                                                                       owl:hasValue "true"^^xsd:boolean
                                                                     ]
                                                                   ) ;
                                                rdf:type owl:Class
                                              ]
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty base:outgoing ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:SequenceFlow
                                              ]
                                            )
                              ] ,
                              [ rdf:type owl:Class ;
                                owl:unionOf ( [ rdf:type owl:Class ;
                                                owl:complementOf [ rdf:type owl:Restriction ;
                                                                   owl:onProperty ext:hasEventMarker ;
                                                                   owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                   owl:onClass ext:CancelEventMarker
                                                                 ]
                                              ]
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:isElementOf ;
                                                owl:allValuesFrom base:Transaction
                                              ]
                                            )
                              ] ,
                              [ rdf:type owl:Class ;
                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass ext:MultipleEventMarker
                                              ]
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:outgoingMsgFlow ;
                                                owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:MessageFlow
                                              ]
                                            )
                              ] ,
                              [ rdf:type owl:Class ;
                                owl:unionOf ( [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:hasEventMarker ;
                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                owl:onClass [ rdf:type owl:Class ;
                                                              owl:unionOf ( ext:MessageEventMarker
                                                                            ext:MultipleEventMarker
                                                                          )
                                                            ]
                                              ]
                                              [ rdf:type owl:Restriction ;
                                                owl:onProperty ext:outgoingMsgFlow ;
                                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                owl:onClass base:MessageFlow
                                              ]
                                            )
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty base:incoming ;
                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                owl:onClass base:SequenceFlow
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:hasEventMarker ;
                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                owl:onClass [ rdf:type owl:Class ;
                                              owl:unionOf ( ext:CancelEventMarker
                                                            ext:CompensationEventMarker
                                                            ext:ErrorEventMarker
                                                            ext:EscalationEventMarker
                                                            ext:MessageEventMarker
                                                            ext:MultipleEventMarker
                                                            ext:NoneEventMarker
                                                            ext:SignalEventMarker
                                                            ext:TerminateEventMarker
                                                          )
                                            ]
                              ] ,
                              [ rdf:type owl:Restriction ;
                                owl:onProperty ext:incomingMsgFlow ;
                                owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                owl:onClass base:MessageFlow
                              ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:isElementOf ;
                                                                owl:someValuesFrom ext:ExpandedSubProcess
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:isAttachedToBoundary ;
                                                                owl:hasValue "true"^^xsd:boolean
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   rdfs:comment """The End Event ends the flow of the Process, and thus, will not have any outgoing Sequence Flows.

An End Event MUST NOT be a source for Sequence Flows; that is, there MUST NOT be outgoing Sequence Flows. 
•	An exception to this is when an End Event is used in an Expanded Sub-Process and is attached to the boundary of that Sub-Process. In this case, a Sequence Flow from the higher-level Process MAY connect from that End Event in lieu of connecting from the actual boundary of the Sub-Process."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:CancelEventMarker
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:isElementOf ;
                                         owl:allValuesFrom base:Transaction
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "The Cancel End Event MUST only be used within a Transaction Sub-Process and, thus, MAY NOT be used in any other type of Sub-Process or Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:MultipleEventMarker
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:outgoingMsgFlow ;
                                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "The Result attribute of the End Event MUST be set to Multiple if there is more than one outgoing Message Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass [ rdf:type owl:Class ;
                                                       owl:unionOf ( ext:MessageEventMarker
                                                                     ext:MultipleEventMarker
                                                                   )
                                                     ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:outgoingMsgFlow ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:MessageFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "The Result attribute of the End Event MUST be set to Message or Multiple if there are any outgoing Message Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification """*An End Event MUST be a target for a Sequence Flow.
*An End Event MAY have multiple incoming Sequence Flows."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CancelEventMarker
                                                     ext:CompensationEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:NoneEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TerminateEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "There are nine types of End Events in BPMN: None, Message, Escalation, Error, Cancel, Compensation, Signal, Terminate, and Multiple."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EndEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "An End Event MUST NOT be the target of a Message Flow; it can have no incoming Message Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Event
base:Event rdfs:subClassOf [ rdf:type owl:Restriction ;
                             owl:onProperty ext:incomingMsgFlow ;
                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                             owl:onClass base:MessageFlow
                           ] ,
                           [ rdf:type owl:Restriction ;
                             owl:onProperty ext:outgoingMsgFlow ;
                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                             owl:onClass base:MessageFlow
                           ] ,
                           [ rdf:type owl:Restriction ;
                             owl:onProperty base:eventDefinitionRefs ;
                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                             owl:onClass base:EventDefinition
                           ] ,
                           [ rdf:type owl:Restriction ;
                             owl:onProperty base:eventDefinitions ;
                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                             owl:onClass base:EventDefinition
                           ] ,
                           [ rdf:type owl:Restriction ;
                             owl:onProperty ext:hasEventMarker ;
                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                             owl:onClass [ rdf:type owl:Class ;
                                           owl:unionOf ( ext:CancelEventMarker
                                                         ext:CompensationEventMarker
                                                         ext:ConditionalEventMarker
                                                         ext:ErrorEventMarker
                                                         ext:EscalationEventMarker
                                                         ext:LinkEventMarker
                                                         ext:MessageEventMarker
                                                         ext:MultipleEventMarker
                                                         ext:NoneEventMarker
                                                         ext:ParallelMultipleEventMarker
                                                         ext:SignalEventMarker
                                                         ext:TerminateEventMarker
                                                         ext:TimerEventMarker
                                                       )
                                         ]
                           ] ,
                           [ rdf:type owl:Restriction ;
                             owl:onProperty base:isInterrupting ;
                             owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                             owl:onDataRange xsd:boolean
                           ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Event ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Start Event MAY be the target for a Message Flow; it can have zero (0) or more incoming Message Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Event ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "An End Event MAY be the source of a Message Flow; it can have zero (0) or more outgoing Message Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Event ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventDefinitionRefs ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EventDefinition
                       ] ;
   base:bpmnSpecification """References the reusable EventDefinitions that are triggers
expected for a catch Event. Reusable EventDefinitions are
defined as top-level elements. These EventDefinitions can be
shared by different catch and throw Events.
• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a Catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90).
This is an ordered set.
...
References the reusable EventDefinitions that are results
expected for a throw Event.

This definition was specified within the two subclasses CatchEvent and ThrowEvent and can, therefore, also be specified in the superclass. Furthermore, general specifications 0..n are always permitted."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Event ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:eventDefinitions ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EventDefinition
                       ] ;
   base:bpmnSpecification """Defines the event EventDefinitions that are triggers expected
for a catch Event. These EventDefinitions are only valid inside
the current Event.
• If there is no EventDefinition defined, then this is
considered a catch None Event and the Event will not have
an internal marker (see Figure 10.91).
• If there is more than one EventDefinition defined, this is
considered a catch Multiple Event and the Event will have
the pentagon internal marker (see Figure 10.90).
This is an ordered set.
...
Defines the event EventDefinitions that are results expected for
a throw Event.

This definition was specified within the two subclasses CatchEvent and ThrowEvent and can, therefore, also be specified in the superclass. Furthermore, general specifications 0..n are always permitted."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Event ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CancelEventMarker
                                                     ext:CompensationEventMarker
                                                     ext:ConditionalEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:LinkEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:NoneEventMarker
                                                     ext:ParallelMultipleEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TerminateEventMarker
                                                     ext:TimerEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Event ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onDataRange xsd:boolean
                       ] ;
   base:bpmnSpecification "Note that there is a distinction between interrupting and non-interrupting Events and the handling of these Events"
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#EventBasedGateway
base:EventBasedGateway rdfs:subClassOf [ rdf:type owl:Class ;
                                         owl:unionOf ( [ rdf:type owl:Class ;
                                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                                            owl:onProperty ext:isElementOf ;
                                                                            owl:someValuesFrom [ rdf:type owl:Class ;
                                                                                                 owl:unionOf ( base:Choreography
                                                                                                               base:SubChoreography
                                                                                                             )
                                                                                               ]
                                                                          ]
                                                       ]
                                                       [ rdf:type owl:Restriction ;
                                                         owl:onProperty base:outgoing ;
                                                         owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                                              owl:onProperty base:targetRef ;
                                                                              owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                                  owl:unionOf ( ext:ConditionalEvent
                                                                                                                ext:SignalEvent
                                                                                                                ext:TimerEvent
                                                                                                              )
                                                                                                ]
                                                                            ]
                                                       ]
                                                     )
                                       ] ,
                                       [ rdf:type owl:Class ;
                                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                                         owl:onProperty base:incoming ;
                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                         owl:onClass base:SequenceFlow
                                                       ]
                                                       [ rdf:type owl:Restriction ;
                                                         owl:onProperty base:instantiate ;
                                                         owl:hasValue "false"^^xsd:boolean
                                                       ]
                                                     )
                                       ] ,
                                       [ rdf:type owl:Class ;
                                         owl:complementOf [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:outgoing ;
                                                                                   owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                                                                        owl:onProperty base:targetRef ;
                                                                                                        owl:someValuesFrom ext:MessageEvent
                                                                                                      ]
                                                                                 ]
                                                                                 [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty base:outgoing ;
                                                                                   owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                                                                        owl:onProperty base:targetRef ;
                                                                                                        owl:someValuesFrom base:ReceiveTask
                                                                                                      ]
                                                                                 ]
                                                                               ) ;
                                                            rdf:type owl:Class
                                                          ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:targetRef ;
                                                              owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                  owl:unionOf ( [ owl:intersectionOf ( base:IntermediateCatchEvent
                                                                                                                       [ rdf:type owl:Restriction ;
                                                                                                                         owl:onProperty ext:hasEventMarker ;
                                                                                                                         owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                                                                             owl:unionOf ( ext:ConditionalEventMarker
                                                                                                                                                           ext:MessageEventMarker
                                                                                                                                                           ext:MultipleEventMarker
                                                                                                                                                           ext:SignalEventMarker
                                                                                                                                                           ext:TimerEventMarker
                                                                                                                                                         )
                                                                                                                                           ]
                                                                                                                       ]
                                                                                                                     ) ;
                                                                                                  rdf:type owl:Class
                                                                                                ]
                                                                                                [ owl:intersectionOf ( base:ReceiveTask
                                                                                                                       [ rdf:type owl:Restriction ;
                                                                                                                         owl:onProperty base:boundaryEventRefs ;
                                                                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                                         owl:onClass base:BoundaryEvent
                                                                                                                       ]
                                                                                                                     ) ;
                                                                                                  rdf:type owl:Class
                                                                                                ]
                                                                                              )
                                                                                ]
                                                            ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:allValuesFrom [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:targetRef ;
                                                             owl:allValuesFrom [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty base:incoming ;
                                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                 owl:onClass base:SequenceFlow
                                                                               ]
                                                           ]
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ] ,
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:SequenceFlowConditional
                                       ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:isElementOf ;
                                                            owl:someValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( base:Choreography
                                                                                               base:SubChoreography
                                                                                             )
                                                                               ]
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:targetRef ;
                                                              owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                  owl:unionOf ( ext:ConditionalEvent
                                                                                                ext:SignalEvent
                                                                                                ext:TimerEvent
                                                                                              )
                                                                                ]
                                                            ]
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """Table 11.7 - Use of Intermediate Events in Choreography

Message Intermediate Events MUST NOT be used in the Event-Based Gateway.
Timer Intermediate Events MAY be used, but they restrict the participation in the Gateway.
...
Signal Intermediate Events MAY be used (they are visible to all Participants)
No other types of Intermediate Events are allowed.

Remark: Table 11.7 also explicitly allows Conditional Events, however, they are not mentioned in section 11.6.2. Nevertheless, the author thinks, that Conditional Events should also be possible."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:instantiate ;
                                         owl:hasValue "false"^^xsd:boolean
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """If the Event Gateway’s instantiate attribute is set to true, then the marker for the Event Gateway looks like a Multiple Start Event ...
In order for an Event Gateway to instantiate a Process, it MUST not have any incoming Sequence Flows:"""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:complementOf [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                   owl:onProperty base:outgoing ;
                                                                   owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                                                        owl:onProperty base:targetRef ;
                                                                                        owl:someValuesFrom ext:MessageEvent
                                                                                      ]
                                                                 ]
                                                                 [ rdf:type owl:Restriction ;
                                                                   owl:onProperty base:outgoing ;
                                                                   owl:someValuesFrom [ rdf:type owl:Restriction ;
                                                                                        owl:onProperty base:targetRef ;
                                                                                        owl:someValuesFrom base:ReceiveTask
                                                                                      ]
                                                                 ]
                                                               ) ;
                                            rdf:type owl:Class
                                          ]
                       ] ;
   base:bpmnSpecification "If Message Intermediate Events are used in the configuration, then Receive Tasks MUST NOT be used in that configuration and vice versa."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:someValuesFrom [ rdf:type owl:Restriction ;
                                              owl:onProperty base:targetRef ;
                                              owl:allValuesFrom [ rdf:type owl:Class ;
                                                                  owl:unionOf ( [ owl:intersectionOf ( base:IntermediateCatchEvent
                                                                                                       [ rdf:type owl:Restriction ;
                                                                                                         owl:onProperty ext:hasEventMarker ;
                                                                                                         owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                                                             owl:unionOf ( ext:ConditionalEventMarker
                                                                                                                                           ext:MessageEventMarker
                                                                                                                                           ext:MultipleEventMarker
                                                                                                                                           ext:SignalEventMarker
                                                                                                                                           ext:TimerEventMarker
                                                                                                                                         )
                                                                                                                           ]
                                                                                                       ]
                                                                                                     ) ;
                                                                                  rdf:type owl:Class
                                                                                ]
                                                                                [ owl:intersectionOf ( base:ReceiveTask
                                                                                                       [ rdf:type owl:Restriction ;
                                                                                                         owl:onProperty base:boundaryEventRefs ;
                                                                                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                                                         owl:onClass base:BoundaryEvent
                                                                                                       ]
                                                                                                     ) ;
                                                                                  rdf:type owl:Class
                                                                                ]
                                                                              )
                                                                ]
                                            ]
                       ] ;
   base:bpmnSpecification """Event-Based Gateways are configured by having outgoing Sequence Flows target an Intermediate Event or a Receive Task in any combination
...
Receive Tasks used in an Event Gateway configuration MUST NOT have any attached Intermediate
Events.
Only the following Intermediate Event triggers are valid: Message, Signal, Timer, Conditional, and Multiple"""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:allValuesFrom [ rdf:type owl:Restriction ;
                                             owl:onProperty base:targetRef ;
                                             owl:allValuesFrom [ rdf:type owl:Restriction ;
                                                                 owl:onProperty base:incoming ;
                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                 owl:onClass base:SequenceFlow
                                                               ]
                                           ]
                       ] ;
   base:bpmnSpecification "Target elements in an Event Gateway configuration MUST NOT have any additional incoming Sequence Flows (other than that from the Event Gateway)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "An Event Gateway MUST have two or more outgoing Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:EventBasedGateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:SequenceFlowConditional
                       ] ;
   base:bpmnSpecification "The outgoing Sequence Flows of the Event Gateway MUST NOT have a conditionExpression."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#FlowElementsContainer
base:FlowElementsContainer rdfs:subClassOf [ owl:intersectionOf ( [ rdf:type owl:Class ;
                                                                    owl:unionOf ( [ rdf:type owl:Class ;
                                                                                    owl:complementOf [ rdf:type owl:Restriction ;
                                                                                                       owl:onProperty ext:hasElement ;
                                                                                                       owl:someValuesFrom base:EndEvent
                                                                                                     ]
                                                                                  ]
                                                                                  [ rdf:type owl:Restriction ;
                                                                                    owl:onProperty ext:hasElement ;
                                                                                    owl:someValuesFrom base:StartEvent
                                                                                  ]
                                                                                )
                                                                  ]
                                                                  [ rdf:type owl:Class ;
                                                                    owl:unionOf ( [ rdf:type owl:Class ;
                                                                                    owl:complementOf [ rdf:type owl:Restriction ;
                                                                                                       owl:onProperty ext:hasElement ;
                                                                                                       owl:someValuesFrom base:StartEvent
                                                                                                     ]
                                                                                  ]
                                                                                  [ rdf:type owl:Restriction ;
                                                                                    owl:onProperty ext:hasElement ;
                                                                                    owl:someValuesFrom base:EndEvent
                                                                                  ]
                                                                                )
                                                                  ]
                                                                ) ;
                                             rdf:type owl:Class
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:hasElement ;
                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                             owl:onClass base:EndEvent
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:hasElement ;
                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                             owl:onClass base:Event
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:hasElement ;
                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                             owl:onClass base:Group
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:hasElement ;
                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                             owl:onClass base:StartEvent
                                           ] ,
                                           [ rdf:type owl:Restriction ;
                                             owl:onProperty ext:hasElement ;
                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                             owl:onClass base:TextAnnotation
                                           ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:FlowElementsContainer ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ owl:intersectionOf ( [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Class ;
                                                                owl:complementOf [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty ext:hasElement ;
                                                                                   owl:someValuesFrom base:EndEvent
                                                                                 ]
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:hasElement ;
                                                                owl:someValuesFrom base:StartEvent
                                                              ]
                                                            )
                                              ]
                                              [ rdf:type owl:Class ;
                                                owl:unionOf ( [ rdf:type owl:Class ;
                                                                owl:complementOf [ rdf:type owl:Restriction ;
                                                                                   owl:onProperty ext:hasElement ;
                                                                                   owl:someValuesFrom base:StartEvent
                                                                                 ]
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:hasElement ;
                                                                owl:someValuesFrom base:EndEvent
                                                              ]
                                                            )
                                              ]
                                            ) ;
                         rdf:type owl:Class
                       ] ;
   base:bpmnSpecification """If there is an End Event, then there MUST be at least one Start Event.
If there is a Start Event, then there MUST be at least one End Event.
Annotation: BPMN Specifcation only defines this explicitly for Process and SubProcesses but the author thinks that it also applies to Choreographies and SubChoreographies."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:FlowElementsContainer ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:EndEvent
                       ] ;
   base:bpmnSpecification """Annotation: Restriction was defined in every Subclass, therefore moved to Superclass.
Process/SubProcess: There MAY be multiple End Events within a single level of a Process.
An End Event is OPTIONAL: a given Process level—a Process or an expanded Sub-Process—MAY (is NOT REQUIRED to) have this shape.
Choreography/SubChoreography: Table 11.8 – Use of End Events in Choreography"""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:FlowElementsContainer ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Event
                       ] ;
   base:bpmnSpecification """Annotation: Restriction was defined in every Subclass, therefore moved to Superclass.
Process/SubProcess: In BPMN a Process is depicted as a graph of Flow Elements, which are a set of Activities, Events, Gateways, and Sequence Flows that define finite execution semantics (see Figure 10.1).
Choreography/SubChoreography: The Choreography looks similar to a private Business Process since it consists of a network of Activities, Events, and Gateways (see Figure 7.4). Remark: Activities refer to ChoreographyActivities, not normal Activities."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:FlowElementsContainer ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Group
                       ] ;
   base:bpmnSpecification "Both Text Annotations and Groups can be used within Choreographies and all BPMN diagrams. There are no restrictions on their use."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:FlowElementsContainer ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:StartEvent
                       ] ;
   base:bpmnSpecification """Annotation: Restriction was defined in every Subclass, therefore moved to Superclass.
Process/SubProcess: A Start Event is OPTIONAL: a Process level—a top-level Process, a Sub-Process (embedded), or a Global Process (called Process)—MAY (is NOT REQUIRED to) have a Start Event.
Choreography/SubChoreography: Start Events provide the graphical marker for the start of a Choreography.
There MAY be multiple Start Events for a given Process level."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:FlowElementsContainer ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:TextAnnotation
                       ] ;
   base:bpmnSpecification "Both Text Annotations and Groups can be used within Choreographies and all BPMN diagrams. There are no restrictions on their use."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Gateway
base:Gateway rdfs:subClassOf [ rdf:type owl:Class ;
                               owl:unionOf ( base:EventBasedGateway
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty base:incoming ;
                                               owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                               owl:onClass base:SequenceFlow
                                             ]
                                           )
                             ] ,
                             [ rdf:type owl:Class ;
                               owl:unionOf ( [ rdf:type owl:Restriction ;
                                               owl:onProperty base:incoming ;
                                               owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                               owl:onClass base:SequenceFlow
                                             ]
                                             [ rdf:type owl:Restriction ;
                                               owl:onProperty base:outgoing ;
                                               owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                               owl:onClass base:SequenceFlow
                                             ]
                                           )
                             ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Gateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( base:EventBasedGateway
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "In that case, the first matching Event will create a new instance of the Process, and waiting for the other Events originating from the same decision stops, following the usual semantics of the Event-Based Exclusive Gateway. Note that this is the only scenario where a Gateway can exist without an incoming Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Gateway ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:minQualifiedCardinality "2"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "A Gateway MUST have either multiple incoming Sequence Flows or multiple outgoing Sequence Flows (i.e., it MUST merge or split the flow)."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#GlobalChoreographyTask
base:GlobalChoreographyTask rdfs:subClassOf [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:hasElement ;
                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                              owl:onClass base:FlowElement
                                            ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalChoreographyTask ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:FlowElement
                       ] ;
   base:bpmnSpecification "A GlobalChoreographyTask MUST NOT contain any Flow Elements."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#GlobalConversation
base:GlobalConversation rdfs:subClassOf [ rdf:type owl:Restriction ;
                                          owl:onProperty ext:hasElement ;
                                          owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:CorrelationKey
                                        ] ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty ext:hasElement ;
                                          owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:MessageFlow
                                        ] ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty ext:hasElement ;
                                          owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:Participant
                                        ] ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty ext:hasElement ;
                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:ConversationNode
                                        ] ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty ext:hasElement ;
                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:FlowElement
                                        ] ,
                                        [ rdf:type owl:Restriction ;
                                          owl:onProperty base:choreographyRef ;
                                          owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                          owl:onClass base:Choreography
                                        ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:CorrelationKey
                       ] ;
   base:bpmnSpecification """Since a GlobalConversation does not have any Flow Elements, it does not require MessageFlowAssociations, ParticipantAssociations, or ConversationAssociations or Artifacts.
It is basically a set of Participants, Message Flows, and CorrelationKeys intended for reuse."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification """Since a GlobalConversation does not have any Flow Elements, it does not require MessageFlowAssociations, ParticipantAssociations, or ConversationAssociations or Artifacts.
It is basically a set of Participants, Message Flows, and CorrelationKeys intended for reuse."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Participant
                       ] ;
   base:bpmnSpecification """Since a GlobalConversation does not have any Flow Elements, it does not require MessageFlowAssociations, ParticipantAssociations, or ConversationAssociations or Artifacts.
It is basically a set of Participants, Message Flows, and CorrelationKeys intended for reuse."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ConversationNode
                       ] ;
   base:bpmnSpecification "A GlobalConversation MUST NOT contain any ConversationNodes."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:FlowElement
                       ] ;
   base:bpmnSpecification "Since a GlobalConversation does not have any Flow Elements, it does not require MessageFlowAssociations, ParticipantAssociations, or ConversationAssociations or Artifacts."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:GlobalConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:choreographyRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Choreography
                       ] ;
   base:bpmnSpecification """Collaboration has attribute choreographyRef but according to BPMN Spec.: Attribute is not applicable for Choreography or GlobalConversation which are a subtypes of Collaboration.

Also, the Collaboration attribute choreographyRef is not applicable to GlobalConversation."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#IntermediateCatchEvent
base:IntermediateCatchEvent rdfs:subClassOf [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Class ;
                                                              owl:complementOf [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty ext:hasEventMarker ;
                                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                 owl:onClass ext:LinkEventMarker
                                                                               ]
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:incoming ;
                                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:incoming ;
                                                              owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty ext:hasEventMarker ;
                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass ext:LinkEventMarker
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:outgoing ;
                                                              owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty ext:hasEventMarker ;
                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass ext:LinkEventMarker
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:hasEventMarker ;
                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                              owl:onClass [ rdf:type owl:Class ;
                                                            owl:unionOf ( ext:ConditionalEventMarker
                                                                          ext:LinkEventMarker
                                                                          ext:MessageEventMarker
                                                                          ext:MultipleEventMarker
                                                                          ext:ParallelMultipleEventMarker
                                                                          ext:SignalEventMarker
                                                                          ext:TimerEventMarker
                                                                        )
                                                          ]
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:outgoingMsgFlow ;
                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                              owl:onClass base:MessageFlow
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:incomingMsgFlow ;
                                              owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                              owl:onClass base:MessageFlow
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty base:isInterrupting ;
                                              owl:hasValue "true"^^xsd:boolean
                                            ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:LinkEventMarker
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """A Link Intermediate Event MUST NOT be both a target and a source of a Sequence Flow.

A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source.

BPMN provides Intermediate Events of type Link for use as Off-Page connectors (see Figure 10.84--Note that the figure shows two different printed pages, not two Pools in one diagram). A pair of Link Events is used. One of the pair is shown at the end of one page. This Event is named and has an incoming Sequence Flow and no outgoing Sequence Flows. The second Link Event is at the beginning of the next page, shares the same name, and has an outgoing Sequence Flow and no incoming Sequence Flow."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:LinkEventMarker
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """Intermediate Events in Normal Flow: Intermediate Events MUST be a target of a Sequence Flow. 
Note – this is a change from BPMN 1.2 semantics, which allowed some Intermediate Events to not have an incoming Sequence Flow.
An Intermediate Event MAY have multiple incoming Sequence Flows.
A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:LinkEventMarker
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """Intermediate Events in Normal Flow: Intermediate Events MUST be a target of a Sequence Flow. 
Note – this is a change from BPMN 1.2 semantics, which allowed some Intermediate Events to not have an incoming Sequence Flow.
An Intermediate Event MAY have multiple incoming Sequence Flows.
A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:ConditionalEventMarker
                                                     ext:LinkEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:ParallelMultipleEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TimerEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY have an incoming Message Flow or an outgoing Message Flow, but not both."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY be the target for a Message Flow; it can have one incoming Message Flow."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateCatchEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """Table 10.89 – Intermediate Event Types in Normal Flow

Table 10.93 – Types of Events and their Markers"""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#IntermediateThrowEvent
base:IntermediateThrowEvent rdfs:subClassOf [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Class ;
                                                              owl:complementOf [ rdf:type owl:Restriction ;
                                                                                 owl:onProperty ext:hasEventMarker ;
                                                                                 owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                 owl:onClass ext:LinkEventMarker
                                                                               ]
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:outgoing ;
                                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:incoming ;
                                                              owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty ext:hasEventMarker ;
                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass ext:LinkEventMarker
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Class ;
                                              owl:unionOf ( [ rdf:type owl:Restriction ;
                                                              owl:onProperty base:outgoing ;
                                                              owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass base:SequenceFlow
                                                            ]
                                                            [ rdf:type owl:Restriction ;
                                                              owl:onProperty ext:hasEventMarker ;
                                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                              owl:onClass ext:LinkEventMarker
                                                            ]
                                                          )
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:hasEventMarker ;
                                              owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                              owl:onClass [ rdf:type owl:Class ;
                                                            owl:unionOf ( ext:CompensationEventMarker
                                                                          ext:EscalationEventMarker
                                                                          ext:LinkEventMarker
                                                                          ext:MessageEventMarker
                                                                          ext:MultipleEventMarker
                                                                          ext:NoneEventMarker
                                                                          ext:SignalEventMarker
                                                                        )
                                                          ]
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:incomingMsgFlow ;
                                              owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                              owl:onClass base:MessageFlow
                                            ] ,
                                            [ rdf:type owl:Restriction ;
                                              owl:onProperty ext:outgoingMsgFlow ;
                                              owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                              owl:onClass base:MessageFlow
                                            ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:LinkEventMarker
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """A Link Intermediate Event MUST NOT be both a target and a source of a Sequence Flow.

A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source.

BPMN provides Intermediate Events of type Link for use as Off-Page connectors (see Figure 10.84--Note that the figure shows two different printed pages, not two Pools in one diagram). A pair of Link Events is used. One of the pair is shown at the end of one page. This Event is named and has an incoming Sequence Flow and no outgoing Sequence Flows. The second Link Event is at the beginning of the next page, shares the same name, and has an outgoing Sequence Flow and no incoming Sequence Flow."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:LinkEventMarker
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """Intermediate Events in Normal Flow: Intermediate Events MUST be a target of a Sequence Flow. 
Note – this is a change from BPMN 1.2 semantics, which allowed some Intermediate Events to not have an incoming Sequence Flow.
An Intermediate Event MAY have multiple incoming Sequence Flows.
A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:outgoing ;
                                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:hasEventMarker ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass ext:LinkEventMarker
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """Intermediate Events in Normal Flow: Intermediate Events MUST be a target of a Sequence Flow. 
Note – this is a change from BPMN 1.2 semantics, which allowed some Intermediate Events to not have an incoming Sequence Flow.
An Intermediate Event MAY have multiple incoming Sequence Flows.
A Link Intermediate Event MAY be the target (target Link) or a source (source Link) of a Sequence Flow, but MUST NOT be both a target and a source."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CompensationEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:LinkEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:NoneEventMarker
                                                     ext:SignalEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:incomingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY have an incoming Message Flow or an outgoing Message Flow, but not both."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:IntermediateThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Message Intermediate Event MAY be a source for a Message Flow; it can have one outgoing Message Flow."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#MessageFlow
base:MessageFlow rdfs:subClassOf [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:isElementOf ;
                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                       owl:unionOf ( base:Choreography
                                                                     base:Collaboration
                                                                     base:GlobalChoreographyTask
                                                                   )
                                                     ]
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty base:sourceRef ;
                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                   owl:onClass base:ConversationNode
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty base:targetRef ;
                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                   owl:onClass base:ConversationNode
                                 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:MessageFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Choreography
                                                           base:Collaboration
                                                           base:GlobalChoreographyTask
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "When a Message Flow is defined it is contained either within a Collaboration, a Choreography, or a GlobalChoreographyTask."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:MessageFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:sourceRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ConversationNode
                       ] ;
   base:bpmnSpecification """Of the types of InteractionNode, only Pools/Participants, Activities, and
Events can be the source of a Message Flow."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:MessageFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:targetRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ConversationNode
                       ] ;
   base:bpmnSpecification """Of the types of InteractionNode, only Pools/Participants, Activities, and
Events can be the target of a Message Flow."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#MultiInstanceLoopCharacteristics
base:MultiInstanceLoopCharacteristics rdfs:subClassOf [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                               owl:onProperty base:complexBehaviorDefinition ;
                                                                                               owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                               owl:onClass base:ComplexBehaviorDefinition
                                                                                             ]
                                                                                             [ rdf:type owl:Restriction ;
                                                                                               owl:onProperty base:behavior ;
                                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                               owl:onClass base:Complex
                                                                                             ]
                                                                                           ) ;
                                                                        rdf:type owl:Class
                                                                      ]
                                                                      [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                               owl:onProperty base:behavior ;
                                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                               owl:onClass base:None
                                                                                             ]
                                                                                             [ rdf:type owl:Restriction ;
                                                                                               owl:onProperty base:noneBehaviorEventRef ;
                                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                               owl:onClass base:EventDefinition
                                                                                             ]
                                                                                           ) ;
                                                                        rdf:type owl:Class
                                                                      ]
                                                                      [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                                               owl:onProperty base:behavior ;
                                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                               owl:onClass base:One
                                                                                             ]
                                                                                             [ rdf:type owl:Restriction ;
                                                                                               owl:onProperty base:oneBehaviorEventRef ;
                                                                                               owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                                               owl:onClass base:EventDefinition
                                                                                             ]
                                                                                           ) ;
                                                                        rdf:type owl:Class
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:behavior ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:All
                                                                      ]
                                                                    )
                                                      ] ,
                                                      [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:loopCardinality ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:Expression
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:loopDataInputRef ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onClass base:ItemAwareElement
                                                                      ]
                                                                    )
                                                      ] ,
                                                      [ rdf:type owl:Class ;
                                                        owl:unionOf ( [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:isSequential ;
                                                                        owl:hasValue "false"^^xsd:boolean
                                                                      ]
                                                                      [ rdf:type owl:Restriction ;
                                                                        owl:onProperty base:numberOfActiveInstances ;
                                                                        owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                        owl:onDataRange [ rdf:type rdfs:Datatype ;
                                                                                          owl:onDatatype xsd:integer ;
                                                                                          owl:withRestrictions ( [ xsd:maxInclusive 1
                                                                                                                 ]
                                                                                                               )
                                                                                        ]
                                                                      ]
                                                                    )
                                                      ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:MultiInstanceLoopCharacteristics ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:complexBehaviorDefinition ;
                                                                owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:ComplexBehaviorDefinition
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:behavior ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:Complex
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:behavior ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:None
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:noneBehaviorEventRef ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:behavior ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:One
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:oneBehaviorEventRef ;
                                                                owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                owl:onClass base:EventDefinition
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:behavior ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:All
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """The attribute behavior acts as a shortcut for specifying when events
SHALL be thrown from an Activity instance that is about to complete. It
can assume values of None, One, All, and Complex, resulting in the
following behavior:
• None: the EventDefinition which is associated through the
noneEvent association will be thrown for each instance
completing;
• One: the EventDefinition referenced through the oneEvent
association will be thrown upon the first instance completing;
• All: no Event is ever thrown; a token is produced after completion
of all instances
• Complex: the complexBehaviorDefinitions are consulted to
determine if and which Events to throw.
...
complexBehaviorDefinition: ComplexBehaviorDefinition [0..*]: Controls when and which Events are thrown in case behavior is set to complex.
oneBehaviorEventRef: EventDefinition [0..1]: 
The EventDefinition which is thrown when behavior is set to one
and the first internal Activity instance has completed.
noneBehaviorEventRef: EventDefinition [0..1]:
The EventDefinition which is thrown when the behavior is set to
none and an internal Activity instance has completed."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:MultiInstanceLoopCharacteristics ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:loopCardinality ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:Expression
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:loopDataInputRef ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:ItemAwareElement
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """In order to initialize a valid multi-instance, either the loopCardinality
Expression or the loopDataInput MUST be specified."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:MultiInstanceLoopCharacteristics ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:isSequential ;
                                         owl:hasValue "false"^^xsd:boolean
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:numberOfActiveInstances ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onDataRange [ rdf:type rdfs:Datatype ;
                                                           owl:onDatatype xsd:integer ;
                                                           owl:withRestrictions ( [ xsd:maxInclusive 1
                                                                                  ]
                                                                                )
                                                         ]
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """numberOfActiveInstances: ... In case of a sequential
Multi-Instance Activity, this value can’t be greater than 1."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Process
base:Process rdfs:subClassOf [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:allValuesFrom [ rdf:type owl:Class ;
                                                   owl:unionOf ( [ rdf:type owl:Class ;
                                                                   owl:complementOf base:EndEvent
                                                                 ]
                                                                 [ rdf:type owl:Restriction ;
                                                                   owl:onProperty ext:hasEventMarker ;
                                                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                       owl:unionOf ( ext:CompensationEventMarker
                                                                                                     ext:ErrorEventMarker
                                                                                                     ext:EscalationEventMarker
                                                                                                     ext:MessageEventMarker
                                                                                                     ext:MultipleEventMarker
                                                                                                     ext:NoneEventMarker
                                                                                                     ext:SignalEventMarker
                                                                                                     ext:TerminateEventMarker
                                                                                                   )
                                                                                     ]
                                                                 ]
                                                               )
                                                 ]
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:allValuesFrom [ rdf:type owl:Class ;
                                                   owl:unionOf ( [ rdf:type owl:Class ;
                                                                   owl:complementOf base:StartEvent
                                                                 ]
                                                                 [ rdf:type owl:Restriction ;
                                                                   owl:onProperty ext:hasEventMarker ;
                                                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                       owl:unionOf ( ext:ConditionalEventMarker
                                                                                                     ext:MessageEventMarker
                                                                                                     ext:MultipleEventMarker
                                                                                                     ext:NoneEventMarker
                                                                                                     ext:ParallelMultipleEventMarker
                                                                                                     ext:SignalEventMarker
                                                                                                     ext:TimerEventMarker
                                                                                                   )
                                                                                     ]
                                                                 ]
                                                               )
                                                 ]
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:allValuesFrom [ rdf:type owl:Class ;
                                                   owl:unionOf ( [ rdf:type owl:Class ;
                                                                   owl:complementOf base:StartEvent
                                                                 ]
                                                                 [ rdf:type owl:Restriction ;
                                                                   owl:onProperty base:isInterrupting ;
                                                                   owl:hasValue "true"^^xsd:boolean
                                                                 ]
                                                               )
                                                 ]
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                               owl:onClass base:DataObject
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                               owl:onClass base:DataObjectReference
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                               owl:onClass base:Gateway
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                               owl:onClass base:SequenceFlow
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                               owl:onClass base:Activity
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty base:interfaceRef ;
                               owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                               owl:onClass base:Interface
                             ] ,
                             [ rdf:type owl:Restriction ;
                               owl:onProperty ext:hasElement ;
                               owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                               owl:onClass base:ChoreographyActivity
                             ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:EndEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:CompensationEventMarker
                                                                                               ext:ErrorEventMarker
                                                                                               ext:EscalationEventMarker
                                                                                               ext:MessageEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:NoneEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TerminateEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Table 10.88
Except Cancel: This type of End is used within a Transaction Sub-Process."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:ConditionalEventMarker
                                                                                               ext:MessageEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:NoneEventMarker
                                                                                               ext:ParallelMultipleEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TimerEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Table 10.84 – Top-Level Process Start Event Types
There are seven (7) types of Start Events for top-level Processes in BPMN (see Table 10.84): None, Message, Timer, Conditional, Signal, Multiple, and Parallel."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:isInterrupting ;
                                                             owl:hasValue "true"^^xsd:boolean
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Start Event attributes isInterrupting:
This attribute only applies to Start Events of Event Sub-Processes; it is ignored for other Start Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObject
                       ] ;
   base:bpmnSpecification "Data Object elements MUST be contained within Process or Sub- Process elements."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObjectReference
                       ] ;
   rdfs:comment "Data Object References are a way to reuse Data Objects in the same diagram."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Gateway
                       ] ;
   rdfs:comment "In BPMN a Process is depicted as a graph of Flow Elements, which are a set of Activities, Events, Gateways, and Sequence Flows that define finite execution semantics (see Figure 10.1)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "In BPMN a Process is depicted as a graph of Flow Elements, which are a set of Activities, Events, Gateways, and Sequence Flows that define finite execution semantics (see Figure 10.1)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Activity
                       ] ;
   base:bpmnSpecification """A Process describes a sequence or flow of Activities in an organization with the objective of carrying out work. In BPMN a Process is depicted as a graph of Flow Elements, which are a set of Activities, Events, Gateways, and Sequence Flows that define finite execution semantics (see Figure 10.1).

Remark: It is discussible whether a process can also have 0 Activities (only Gateways and Events)? The author thinks, that this should not be the case."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:interfaceRef ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Interface
                       ] ;
   base:bpmnSpecification "In this capacity, a Process MAY reference a set of Interfaces that define its external behavior."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Process ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ChoreographyActivity
                       ] ;
   base:bpmnSpecification "Choreography Activities MUST NOT be included as a flowElement for a Process."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Property
base:Property rdfs:subClassOf [ rdf:type owl:Restriction ;
                                owl:onProperty ext:isElementOf ;
                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                    owl:unionOf ( base:Activity
                                                                  base:Event
                                                                  base:Process
                                                                )
                                                  ]
                              ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Property ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Activity
                                                           base:Event
                                                           base:Process
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Property elements MUST be contained within a FlowElement.
...
Certain flow elements MAY contain properties, in particular only Processes, Activities and Events MAY contain Properties."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#ReceiveTask
base:ReceiveTask rdfs:subClassOf [ rdf:type owl:Class ;
                                   owl:unionOf ( [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:incoming ;
                                                   owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                   owl:onClass base:SequenceFlow
                                                 ]
                                                 [ rdf:type owl:Restriction ;
                                                   owl:onProperty base:instantiate ;
                                                   owl:hasValue "false"^^xsd:boolean
                                                 ]
                                               )
                                 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ReceiveTask ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:instantiate ;
                                         owl:hasValue "false"^^xsd:boolean
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "In order for the Receive Task to instantiate the Process its instantiate attribute MUST be set to true and it MUST NOT have any incoming Sequence Flow."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#ScriptTask
base:ScriptTask rdfs:subClassOf [ rdf:type owl:Class ;
                                  owl:unionOf ( [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:script ;
                                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                  owl:onDataRange xsd:string
                                                ]
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:scriptFormat ;
                                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                  owl:onDataRange xsd:string
                                                ]
                                              )
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ScriptTask ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Restriction ;
                                         owl:onProperty base:script ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onDataRange xsd:string
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:scriptFormat ;
                                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                         owl:onDataRange xsd:string
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """scriptFormat: ...
And it MUST be specified if a script is provided."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#SequenceFlow
base:SequenceFlow rdfs:subClassOf [ rdf:type owl:Class ;
                                    owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:sourceRef ;
                                                                           owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                               owl:unionOf ( base:Activity
                                                                                                             base:Event
                                                                                                             base:Gateway
                                                                                                           )
                                                                                             ]
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:targetRef ;
                                                                           owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                               owl:unionOf ( base:Activity
                                                                                                             base:Event
                                                                                                             base:Gateway
                                                                                                           )
                                                                                             ]
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ]
                                                  [ rdf:type owl:Class ;
                                                    owl:complementOf [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:isElementOf ;
                                                                       owl:someValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( base:Process
                                                                                                          base:SubProcess
                                                                                                        )
                                                                                          ]
                                                                     ]
                                                  ]
                                                )
                                  ] ,
                                  [ rdf:type owl:Class ;
                                    owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:sourceRef ;
                                                                           owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                               owl:unionOf ( base:ChoreographyActivity
                                                                                                             base:Event
                                                                                                             base:Gateway
                                                                                                           )
                                                                                             ]
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:targetRef ;
                                                                           owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                               owl:unionOf ( base:ChoreographyActivity
                                                                                                             base:Event
                                                                                                             base:Gateway
                                                                                                           )
                                                                                             ]
                                                                         ]
                                                                       ) ;
                                                    rdf:type owl:Class
                                                  ]
                                                  [ rdf:type owl:Class ;
                                                    owl:complementOf [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:isElementOf ;
                                                                       owl:someValuesFrom [ rdf:type owl:Class ;
                                                                                            owl:unionOf ( base:Choreography
                                                                                                          base:SubChoreography
                                                                                                        )
                                                                                          ]
                                                                     ]
                                                  ]
                                                )
                                  ] ,
                                  [ rdf:type owl:Class ;
                                    owl:unionOf ( [ rdf:type owl:Class ;
                                                    owl:complementOf [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:sourceRef ;
                                                                       owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass base:StartEvent
                                                                     ]
                                                  ]
                                                  [ rdf:type owl:Restriction ;
                                                    owl:onProperty base:conditionExpression ;
                                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                    owl:onClass base:Expression
                                                  ]
                                                )
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:sourceRef ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass ext:EventSubProcess
                                  ] ,
                                  [ rdf:type owl:Restriction ;
                                    owl:onProperty base:targetRef ;
                                    owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                    owl:onClass ext:EventSubProcess
                                  ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SequenceFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:sourceRef ;
                                                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                    owl:unionOf ( base:Activity
                                                                                                  base:Event
                                                                                                  base:Gateway
                                                                                                )
                                                                                  ]
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:targetRef ;
                                                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                    owl:unionOf ( base:Activity
                                                                                                  base:Event
                                                                                                  base:Gateway
                                                                                                )
                                                                                  ]
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:isElementOf ;
                                                            owl:someValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( base:Process
                                                                                               base:SubProcess
                                                                                             )
                                                                               ]
                                                          ]
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "For Processes, they can only connect Events, Gateways, and Activities."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SequenceFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:sourceRef ;
                                                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                    owl:unionOf ( base:ChoreographyActivity
                                                                                                  base:Event
                                                                                                  base:Gateway
                                                                                                )
                                                                                  ]
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty base:targetRef ;
                                                                owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                    owl:unionOf ( base:ChoreographyActivity
                                                                                                  base:Event
                                                                                                  base:Gateway
                                                                                                )
                                                                                  ]
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:isElementOf ;
                                                            owl:someValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( base:Choreography
                                                                                               base:SubChoreography
                                                                                             )
                                                                               ]
                                                          ]
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "For Choreographies, they can only connect Events, Gateways, and Choreography Activities"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SequenceFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty base:sourceRef ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass base:StartEvent
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:conditionExpression ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:Expression
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """Multiple Sequence Flows MAY originate from a Start Event. For each Sequence Flow that has the Start Event as a source, a new parallel path SHALL be generated.
* The conditionExpression attribute for all outgoing Sequence Flows MUST be set to None."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SequenceFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:sourceRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:EventSubProcess
                       ] ;
   base:bpmnSpecification """The FlowNode that the Sequence Flow is connecting from.
For a Process: Of the types of FlowNode, only Activities, Gateways, and Events can be the source. However, Activities that are Event Sub-Processes are not allowed to be a source.
For a Choreography: Of the types of FlowNode, only Choreography Activities, Gateways, and Events can be the source."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SequenceFlow ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:targetRef ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:EventSubProcess
                       ] ;
   base:bpmnSpecification """The FlowNode that the Sequence Flow is connecting to.
For a Process: Of the types of FlowNode, only Activities, Gateways, and Events can be the target. However, Activities that are Event Sub-Processes are not allowed to be a target.
For a Choreography: Of the types of FlowNode, only Choreography Activities, Gateways, and Events can be the target."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#StartEvent
base:StartEvent rdfs:subClassOf [ rdf:type owl:Class ;
                                  owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                         owl:onProperty ext:isElementOf ;
                                                                         owl:someValuesFrom ext:ExpandedSubProcess
                                                                       ]
                                                                       [ rdf:type owl:Restriction ;
                                                                         owl:onProperty ext:isAttachedToBoundary ;
                                                                         owl:hasValue "true"^^xsd:boolean
                                                                       ]
                                                                     ) ;
                                                  rdf:type owl:Class
                                                ]
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty base:incoming ;
                                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                  owl:onClass base:SequenceFlow
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Class ;
                                  owl:unionOf ( [ rdf:type owl:Class ;
                                                  owl:complementOf [ rdf:type owl:Restriction ;
                                                                     owl:onProperty ext:isElementOf ;
                                                                     owl:someValuesFrom ext:EventSubProcess
                                                                   ]
                                                ]
                                                [ rdf:type owl:Class ;
                                                  owl:complementOf [ rdf:type owl:Restriction ;
                                                                     owl:onProperty ext:hasEventMarker ;
                                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                     owl:onClass ext:NoneEventMarker
                                                                   ]
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Class ;
                                  owl:unionOf ( [ rdf:type owl:Class ;
                                                  owl:complementOf [ rdf:type owl:Restriction ;
                                                                     owl:onProperty ext:hasEventMarker ;
                                                                     owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                                     owl:onClass ext:CompensationEventMarker
                                                                   ]
                                                ]
                                                [ rdf:type owl:Restriction ;
                                                  owl:onProperty ext:isElementOf ;
                                                  owl:allValuesFrom ext:EventSubProcess
                                                ]
                                              )
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:isElementOf ;
                                  owl:allValuesFrom [ rdf:type owl:Class ;
                                                      owl:unionOf ( base:Choreography
                                                                    base:Process
                                                                    base:SubChoreography
                                                                    base:SubProcess
                                                                  )
                                                    ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty base:outgoing ;
                                  owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:SequenceFlow
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasEventMarker ;
                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass [ rdf:type owl:Class ;
                                                owl:unionOf ( ext:CompensationEventMarker
                                                              ext:ConditionalEventMarker
                                                              ext:ErrorEventMarker
                                                              ext:EscalationEventMarker
                                                              ext:MessageEventMarker
                                                              ext:MultipleEventMarker
                                                              ext:NoneEventMarker
                                                              ext:ParallelMultipleEventMarker
                                                              ext:SignalEventMarker
                                                              ext:TimerEventMarker
                                                            )
                                              ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:outgoingMsgFlow ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:MessageFlow
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty base:incoming ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:SequenceFlow
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ owl:intersectionOf ( [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:isElementOf ;
                                                                owl:someValuesFrom ext:ExpandedSubProcess
                                                              ]
                                                              [ rdf:type owl:Restriction ;
                                                                owl:onProperty ext:isAttachedToBoundary ;
                                                                owl:hasValue "true"^^xsd:boolean
                                                              ]
                                                            ) ;
                                         rdf:type owl:Class
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty base:incoming ;
                                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                         owl:onClass base:SequenceFlow
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """In terms of Sequence Flows, the Start Event starts the flow of the Process, and thus, will not have any incoming Sequence Flows—no Sequence Flow can connect to a Start Event.

A Start Event MUST NOT be a target for Sequence Flows; it MUST NOT have incoming Sequence Flows.
* An exception to this is when a Start Event is used in an Expanded Sub-Process and is attached to the boundary of that Sub-Process. In this case, a Sequence Flow from the higher-level Process MAY connect to that Start Event in lieu of connecting to the actual boundary of the Sub-Process."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:isElementOf ;
                                                            owl:someValuesFrom ext:EventSubProcess
                                                          ]
                                       ]
                                       [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:NoneEventMarker
                                                          ]
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification "The None Start Event MAY NOT be used for an Event Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Class ;
                         owl:unionOf ( [ rdf:type owl:Class ;
                                         owl:complementOf [ rdf:type owl:Restriction ;
                                                            owl:onProperty ext:hasEventMarker ;
                                                            owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                                            owl:onClass ext:CompensationEventMarker
                                                          ]
                                       ]
                                       [ rdf:type owl:Restriction ;
                                         owl:onProperty ext:isElementOf ;
                                         owl:allValuesFrom ext:EventSubProcess
                                       ]
                                     )
                       ] ;
   base:bpmnSpecification """The Compensation Start Event MAY NOT be used for a top-level Process.
The Compensation Start Event MAY be used for an Event Sub-Process."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:isElementOf ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( base:Choreography
                                                           base:Process
                                                           base:SubChoreography
                                                           base:SubProcess
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Start Events can be used for three types of Processes:
• Top-level Processes
• Sub-Processes (embedded)
• Global Process (called)
• Event Sub-Processes
...
Start Events provide the graphical marker for the start of a Choreography. They are used much in the same way as
they are used for a Process (see “Start Event” on page 238)."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:outgoing ;
                         owl:minQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification """* A Start Event MUST be a source for a Sequence Flow.
* Multiple Sequence Flows MAY originate from a Start Event. For each Sequence Flow that has the Start Event as a source, a new parallel path SHALL be generated."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CompensationEventMarker
                                                     ext:ConditionalEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:NoneEventMarker
                                                     ext:ParallelMultipleEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TimerEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:outgoingMsgFlow ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:MessageFlow
                       ] ;
   base:bpmnSpecification "A Start Event MUST NOT be a source for a Message Flow; it MUST NOT have outgoing Message Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:StartEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:incoming ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Start Event MUST NOT be a target for Sequence Flows; it MUST NOT have incoming Sequence Flows."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#SubChoreography
base:SubChoreography rdfs:subClassOf [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:allValuesFrom [ rdf:type owl:Class ;
                                                           owl:unionOf ( [ rdf:type owl:Class ;
                                                                           owl:complementOf base:BoundaryEvent
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty ext:hasEventMarker ;
                                                                           owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                           owl:onClass ext:MessageEventMarker
                                                                         ]
                                                                       )
                                                         ]
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:allValuesFrom [ rdf:type owl:Class ;
                                                           owl:unionOf ( [ rdf:type owl:Class ;
                                                                           owl:complementOf base:StartEvent
                                                                         ]
                                                                         [ rdf:type owl:Restriction ;
                                                                           owl:onProperty base:isInterrupting ;
                                                                           owl:hasValue "true"^^xsd:boolean
                                                                         ]
                                                                       )
                                                         ]
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasMarker ;
                                       owl:allValuesFrom [ rdf:type owl:Class ;
                                                           owl:unionOf ( ext:CollapsedMarker
                                                                         ext:MultiInstanceMarker
                                                                         ext:StandardLoopMarker
                                                                       )
                                                         ]
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:ChoreographyActivity
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Gateway
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:SequenceFlow
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Activity
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:DataAssociation
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:DataObject
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:DataObjectReference
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasElement ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:Lane
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty base:laneSets ;
                                       owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                       owl:onClass base:LaneSet
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasMarker ;
                                       owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                       owl:onClass ext:CollapsedMarker
                                     ] ,
                                     [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasMarker ;
                                       owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                       owl:onClass [ rdf:type owl:Class ;
                                                     owl:unionOf ( ext:MultiInstanceMarker
                                                                   ext:StandardLoopMarker
                                                                 )
                                                   ]
                                     ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:BoundaryEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:MessageEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Message: Attached to Activity boundary 
Yes. Only for Choreography Tasks."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:isInterrupting ;
                                                             owl:hasValue "true"^^xsd:boolean
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Start Event attributes isInterrupting:
This attribute only applies to Start Events of Event Sub-Processes; it is ignored for other Start Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( ext:CollapsedMarker
                                                           ext:MultiInstanceMarker
                                                           ext:StandardLoopMarker
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Choreography, rather than a Choreography Task.

As with a standard Orchestration Sub-Process, the Sub-Choreography MAY have internal markers to show how the
Sub-Choreography MAY be repeated. There are two types of internal markers (see Figure 11.22):
A Sub-Choreography MAY have only one of the three markers at one time.
* The marker for a Sub-Choreography that is a standard loop MUST be..
* The marker for a Sub-Choreography that is parallel multi-instance MUST be..
* The marker for a Sub-Choreography that is sequential multi-instance MUST be a.."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ChoreographyActivity
                       ] ;
   base:bpmnSpecification "When Choreography Activities are defined they are contained within a Choreography or a Sub-Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Gateway
                       ] ;
   base:bpmnSpecification """The Choreography looks similar to a private Business Process since it consists of a network of Activities, Events, and Gateways (see Figure 7.4).
Remark: Activities refer to ChoreographyActivities, not normal Activities."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "Sequence Flows are used within Choreographies to show the sequence of the Choreography Activities"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Activity
                       ] ;
   base:bpmnSpecification "Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataAssociation
                       ] ;
   base:bpmnSpecification "Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObject
                       ] ;
   base:bpmnSpecification """Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography.
Data Object elements MUST be contained within Process or Sub- Process elements."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObjectReference
                       ] ;
   base:bpmnSpecification """Data Object References are a way to reuse Data Objects in the same diagram.
Activities, Data Associations, and Data Objects MUST NOT be included as a flowElement for a Choreography."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Lane
                       ] ;
   base:bpmnSpecification "Swimlanes, both Pools and Lanes, are not used in Choreographies."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:laneSets ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:LaneSet
                       ] ;
   base:bpmnSpecification "LaneSets are not used for Choreographies or Sub-Choreographies."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification "In the collapsed form, the Sub-Process object uses a marker to distinguish it as a Sub-Choreography, rather than a Choreography Task."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubChoreography ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:MultiInstanceMarker
                                                     ext:StandardLoopMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification """As with a standard Orchestration Sub-Process, the Sub-Choreography MAY have internal markers to show how the Sub-Choreography MAY be repeated. There are two types of internal markers (see Figure 11.22): Sub-Choreography MAY have only one of the three markers at one time. 
The marker for a Sub-Choreography that is a standard loop MUST be ..
The marker for a Sub-Choreography that is parallel multi-instance MUST be ..
The marker for a Sub-Choreography that is sequential multi-instance MUST be .."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#SubConversation
base:SubConversation rdfs:subClassOf [ rdf:type owl:Restriction ;
                                       owl:onProperty ext:hasMarker ;
                                       owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                       owl:onClass ext:CollapsedMarker
                                     ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubConversation ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification """The Sub- Conversation marker MUST be a small square with a plus sign (+) inside. The square MUST be positioned at the bottom center of the shape.

A Sub-Conversation is a graphical object within a Collaboration, but it also can be “opened up” to show the lowerlevel details of the Conversation, which consist of Message Flows, Conversations, and/or other Sub-Conversations."""
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#SubProcess
base:SubProcess rdfs:subClassOf [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:allValuesFrom [ rdf:type owl:Class ;
                                                      owl:unionOf ( [ rdf:type owl:Class ;
                                                                      owl:complementOf base:EndEvent
                                                                    ]
                                                                    [ rdf:type owl:Restriction ;
                                                                      owl:onProperty ext:hasEventMarker ;
                                                                      owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                          owl:unionOf ( ext:CancelEventMarker
                                                                                                        ext:CompensationEventMarker
                                                                                                        ext:ErrorEventMarker
                                                                                                        ext:EscalationEventMarker
                                                                                                        ext:MessageEventMarker
                                                                                                        ext:MultipleEventMarker
                                                                                                        ext:NoneEventMarker
                                                                                                        ext:SignalEventMarker
                                                                                                        ext:TerminateEventMarker
                                                                                                      )
                                                                                        ]
                                                                    ]
                                                                  )
                                                    ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:allValuesFrom [ rdf:type owl:Class ;
                                                      owl:unionOf ( [ rdf:type owl:Class ;
                                                                      owl:complementOf base:StartEvent
                                                                    ]
                                                                    [ rdf:type owl:Restriction ;
                                                                      owl:onProperty ext:hasEventMarker ;
                                                                      owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                          owl:unionOf ( ext:CompensationEventMarker
                                                                                                        ext:ConditionalEventMarker
                                                                                                        ext:ErrorEventMarker
                                                                                                        ext:EscalationEventMarker
                                                                                                        ext:MessageEventMarker
                                                                                                        ext:MultipleEventMarker
                                                                                                        ext:NoneEventMarker
                                                                                                        ext:ParallelMultipleEventMarker
                                                                                                        ext:SignalEventMarker
                                                                                                        ext:TimerEventMarker
                                                                                                      )
                                                                                        ]
                                                                    ]
                                                                  )
                                                    ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:Activity
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:BoundaryEvent
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:DataObject
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:DataObjectReference
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:Gateway
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:SequenceFlow
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:ChoreographyActivity
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:DataInput
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasElement ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass base:DataOutput
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                  owl:onClass [ owl:intersectionOf ( ext:LoopMarker
                                                                     ext:MultiInstanceMarker
                                                                   ) ;
                                                rdf:type owl:Class
                                              ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:AdHocMarker
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:CollapsedMarker
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:CompensationMarker
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:LoopMarker
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasMarker ;
                                  owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass ext:MultiInstanceMarker
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:EndEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:CancelEventMarker
                                                                                               ext:CompensationEventMarker
                                                                                               ext:ErrorEventMarker
                                                                                               ext:EscalationEventMarker
                                                                                               ext:MessageEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:NoneEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TerminateEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom [ rdf:type owl:Class ;
                                                                                 owl:unionOf ( ext:CompensationEventMarker
                                                                                               ext:ConditionalEventMarker
                                                                                               ext:ErrorEventMarker
                                                                                               ext:EscalationEventMarker
                                                                                               ext:MessageEventMarker
                                                                                               ext:MultipleEventMarker
                                                                                               ext:NoneEventMarker
                                                                                               ext:ParallelMultipleEventMarker
                                                                                               ext:SignalEventMarker
                                                                                               ext:TimerEventMarker
                                                                                             )
                                                                               ]
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Table 10.93"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Activity
                       ] ;
   base:bpmnSpecification """A Sub-Process is an Activity whose internal details have been modeled using Activities, Gateways, Events, and Sequence Flows.

A Sub-Process is a compound Activity that is included within a Process (see page 173) or Choreography (see page 328). It is compound in that it can be broken down into a finer level of detail (a Process or Choreography) through a set of sub-Activities."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:BoundaryEvent
                       ] ;
   base:bpmnSpecification "(One or more) Intermediate Events MAY be attached directly to the boundary of an Activity."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObject
                       ] ;
   base:bpmnSpecification "Data Object elements MUST be contained within Process or Sub- Process elements."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataObjectReference
                       ] ;
   base:bpmnSpecification "Data Object References are a way to reuse Data Objects in the same diagram."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:Gateway
                       ] ;
   base:bpmnSpecification "A Sub-Process is an Activity whose internal details have been modeled using Activities, Gateways, Events, and Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:SequenceFlow
                       ] ;
   base:bpmnSpecification "A Sub-Process is an Activity whose internal details have been modeled using Activities, Gateways, Events, and Sequence Flows."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:ChoreographyActivity
                       ] ;
   base:bpmnSpecification """When Choreography Activities are defined they are contained within a Choreography or a Sub-Choreography.
Choreography Activities MUST NOT be included as a flowElement for a Process."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataInput
                       ] ;
   base:bpmnSpecification """Embedded Sub-Processes MUST NOT define Data Inputs and Data Outputs directly, however they MAY define them indirectly via
MultiInstanceLoopCharacteristics."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass base:DataOutput
                       ] ;
   base:bpmnSpecification """Embedded Sub-Processes MUST NOT define Data Inputs and Data Outputs directly, however they MAY define them indirectly via
MultiInstanceLoopCharacteristics."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass [ owl:intersectionOf ( ext:LoopMarker
                                                            ext:MultiInstanceMarker
                                                          ) ;
                                       rdf:type owl:Class
                                     ]
                       ] ;
   base:bpmnSpecification "A collapsed Sub-Process MAY have one to three of these other markers, in all combinations except that loop and multi-instance cannot be shown at the same time (see Figure 10.28)."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:AdHocMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies five (5) types of standard markers for Sub-Processes. The (Collapsed) Sub-Process marker, seen in Figure 10.24, can be combined with four (4) other markers: a loop marker or a multi-instance marker, a Compensation marker, and an Ad-Hoc marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CollapsedMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies five (5) types of standard markers for Sub-Processes. The (Collapsed) Sub-Process marker, seen in Figure 10.24, can be combined with four (4) other markers: a loop marker or a multi-instance marker, a Compensation marker, and an Ad-Hoc marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CompensationMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies five (5) types of standard markers for Sub-Processes. The (Collapsed) Sub-Process marker, seen in Figure 10.24, can be combined with four (4) other markers: a loop marker or a multi-instance marker, a Compensation marker, and an Ad-Hoc marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:LoopMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies five (5) types of standard markers for Sub-Processes. The (Collapsed) Sub-Process marker, seen in Figure 10.24, can be combined with four (4) other markers: a loop marker or a multi-instance marker, a Compensation marker, and an Ad-Hoc marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:SubProcess ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:MultiInstanceMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies five (5) types of standard markers for Sub-Processes. The (Collapsed) Sub-Process marker, seen in Figure 10.24, can be combined with four (4) other markers: a loop marker or a multi-instance marker, a Compensation marker, and an Ad-Hoc marker."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Task
base:Task rdfs:subClassOf [ rdf:type owl:Restriction ;
                            owl:onProperty ext:hasMarker ;
                            owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                            owl:onClass [ owl:intersectionOf ( ext:LoopMarker
                                                               ext:MultiInstanceMarker
                                                             ) ;
                                          rdf:type owl:Class
                                        ]
                          ] ,
                          [ rdf:type owl:Restriction ;
                            owl:onProperty ext:hasMarker ;
                            owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                            owl:onClass ext:CompensationMarker
                          ] ,
                          [ rdf:type owl:Restriction ;
                            owl:onProperty ext:hasMarker ;
                            owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                            owl:onClass ext:LoopMarker
                          ] ,
                          [ rdf:type owl:Restriction ;
                            owl:onProperty ext:hasMarker ;
                            owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                            owl:onClass ext:MultiInstanceMarker
                          ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Task ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:qualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                         owl:onClass [ owl:intersectionOf ( ext:LoopMarker
                                                            ext:MultiInstanceMarker
                                                          ) ;
                                       rdf:type owl:Class
                                     ]
                       ] ;
   base:bpmnSpecification """BPMN specifies three types of markers for Task: a Loop marker or a Multi-Instance marker and a Compensation marker. A Task MAY have one or two of these markers (see Figure 10.9).
 The loop Marker MAY be used in combination with the compensation marker. 
The multi-instance marker MAY be used in combination with the compensation marker. 
The Compensation Marker MAY be used in combination with the loop marker or the multi-instance marker."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Task ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:CompensationMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies three types of markers for Task: a Loop marker or a Multi-Instance marker and a Compensation marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Task ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:LoopMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies three types of markers for Task: a Loop marker or a Multi-Instance marker and a Compensation marker."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Task ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasMarker ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:MultiInstanceMarker
                       ] ;
   base:bpmnSpecification "BPMN specifies three types of markers for Task: a Loop marker or a Multi-Instance marker and a Compensation marker."
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#ThrowEvent
base:ThrowEvent rdfs:subClassOf [ rdf:type owl:Restriction ;
                                  owl:onProperty ext:hasEventMarker ;
                                  owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                  owl:onClass [ rdf:type owl:Class ;
                                                owl:unionOf ( ext:CancelEventMarker
                                                              ext:CompensationEventMarker
                                                              ext:ErrorEventMarker
                                                              ext:EscalationEventMarker
                                                              ext:LinkEventMarker
                                                              ext:MessageEventMarker
                                                              ext:MultipleEventMarker
                                                              ext:NoneEventMarker
                                                              ext:SignalEventMarker
                                                              ext:TerminateEventMarker
                                                            )
                                              ]
                                ] ,
                                [ rdf:type owl:Restriction ;
                                  owl:onProperty base:isInterrupting ;
                                  owl:hasValue "true"^^xsd:boolean
                                ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasEventMarker ;
                         owl:qualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass [ rdf:type owl:Class ;
                                       owl:unionOf ( ext:CancelEventMarker
                                                     ext:CompensationEventMarker
                                                     ext:ErrorEventMarker
                                                     ext:EscalationEventMarker
                                                     ext:LinkEventMarker
                                                     ext:MessageEventMarker
                                                     ext:MultipleEventMarker
                                                     ext:NoneEventMarker
                                                     ext:SignalEventMarker
                                                     ext:TerminateEventMarker
                                                   )
                                     ]
                       ] ;
   base:bpmnSpecification "Overview in Table 7.2, Type Dimension"
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:ThrowEvent ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:isInterrupting ;
                         owl:hasValue "true"^^xsd:boolean
                       ] ;
   base:bpmnSpecification "Table 10.93 – Types of Events and their Markers"
 ] .


###  http://www.scch.at/ontologies/bpmn20base.owl#Transaction
base:Transaction rdfs:subClassOf [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:hasElement ;
                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                       owl:unionOf ( [ rdf:type owl:Class ;
                                                                       owl:complementOf base:BoundaryEvent
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:hasEventMarker ;
                                                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass ext:CancelEventMarker
                                                                     ]
                                                                   )
                                                     ]
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:hasElement ;
                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                       owl:unionOf ( [ rdf:type owl:Class ;
                                                                       owl:complementOf base:EndEvent
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:hasEventMarker ;
                                                                       owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                                       owl:onClass ext:CancelEventMarker
                                                                     ]
                                                                   )
                                                     ]
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:hasElement ;
                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                       owl:unionOf ( [ rdf:type owl:Class ;
                                                                       owl:complementOf base:StartEvent
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty ext:hasEventMarker ;
                                                                       owl:allValuesFrom ext:NoneEventMarker
                                                                     ]
                                                                   )
                                                     ]
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:hasElement ;
                                   owl:allValuesFrom [ rdf:type owl:Class ;
                                                       owl:unionOf ( [ rdf:type owl:Class ;
                                                                       owl:complementOf base:StartEvent
                                                                     ]
                                                                     [ rdf:type owl:Restriction ;
                                                                       owl:onProperty base:isInterrupting ;
                                                                       owl:hasValue "true"^^xsd:boolean
                                                                     ]
                                                                   )
                                                     ]
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty ext:hasResult ;
                                   owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                                   owl:onClass ext:TransactionResultEnumeration
                                 ] ,
                                 [ rdf:type owl:Restriction ;
                                   owl:onProperty base:triggeredByEvent ;
                                   owl:hasValue "false"^^xsd:boolean
                                 ] ;
                 base:bpmnSpecification "A Transaction is a specialized type of Sub-Process which will have a special behavior that is controlled through a transaction protocol (such as WS-Transaction)." .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Transaction ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:BoundaryEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "The Cancel Intermediate Event can only be used when attached to the boundary of a Transaction Sub-Process. It cannot be used in any normal flow and cannot be attached to a non-Transaction Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Transaction ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:EndEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:minQualifiedCardinality "0"^^xsd:nonNegativeInteger ;
                                                             owl:onClass ext:CancelEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "Cancel This type of End is used within a Transaction Sub-Process."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Transaction ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty ext:hasEventMarker ;
                                                             owl:allValuesFrom ext:NoneEventMarker
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification "There is only one type of Start Event for Sub-Processes in BPMN (see Figure 10.82): None."
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Transaction ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasElement ;
                         owl:allValuesFrom [ rdf:type owl:Class ;
                                             owl:unionOf ( [ rdf:type owl:Class ;
                                                             owl:complementOf base:StartEvent
                                                           ]
                                                           [ rdf:type owl:Restriction ;
                                                             owl:onProperty base:isInterrupting ;
                                                             owl:hasValue "true"^^xsd:boolean
                                                           ]
                                                         )
                                           ]
                       ] ;
   base:bpmnSpecification """Start Event attributes isInterrupting:
This attribute only applies to Start Events of Event Sub-Processes; it is ignored for other Start Events."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Transaction ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty ext:hasResult ;
                         owl:maxQualifiedCardinality "1"^^xsd:nonNegativeInteger ;
                         owl:onClass ext:TransactionResultEnumeration
                       ] ;
   base:bpmnSpecification """There are three basic outcomes of a Transaction:
1. Successful completion: ...
2. Failed completion (Cancel): ...
3. Hazard: ..."""
 ] .

[ rdf:type owl:Axiom ;
   owl:annotatedSource base:Transaction ;
   owl:annotatedProperty rdfs:subClassOf ;
   owl:annotatedTarget [ rdf:type owl:Restriction ;
                         owl:onProperty base:triggeredByEvent ;
                         owl:hasValue "false"^^xsd:boolean
                       ] ;
   base:bpmnSpecification """A flag that identifies whether this Sub-Process is an Event Sub-Process.
• If false, then this Sub-Process is a normal Sub-Process.
• If true, then this Sub-Process is an Event Sub-Process and is
subject to additional constraints (see page 176)."""
 ] .


#################################################################
#    Annotations
#################################################################

base:CallActivity base:bpmnSpecification "A Call Activity identifies a point in the Process where a global Process or a Global Task is used. The Call Activity acts as a ‘wrapper’ for the invocation of a global Process or Global Task within the execution. The activation of a call Activity results in the transfer of control to the called global Process or Global Task." .


#################################################################
#    General axioms
#################################################################

[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:AbstractTask
                base:BusinessRuleTask
                base:ManualTask
                base:ReceiveTask
                base:ScriptTask
                base:SendTask
                base:ServiceTask
                base:UserTask
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:AdHocMarker
                ext:CollapsedMarker
                ext:CompensationMarker
                ext:LoopMarker
                ext:MultiInstanceMarker
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:CancelEvent
                ext:CompensationEvent
                ext:ConditionalEvent
                ext:ErrorEvent
                ext:EscalationEvent
                ext:LinkEvent
                ext:MessageEvent
                ext:MultipleEvent
                ext:NoneEvent
                ext:ParallelMultipleEvent
                ext:SignalEvent
                ext:TerminateEvent
                ext:TimerEvent
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:CancelEventMarker
                ext:CompensationEventMarker
                ext:ConditionalEventMarker
                ext:ErrorEventMarker
                ext:EscalationEventMarker
                ext:LinkEventMarker
                ext:MessageEventMarker
                ext:MultipleEventMarker
                ext:NoneEventMarker
                ext:ParallelMultipleEventMarker
                ext:SignalEventMarker
                ext:TerminateEventMarker
                ext:TimerEventMarker
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:EmbeddedSubProcess
                ext:EventSubProcess
                base:AdHocSubProcess
                base:Transaction
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:FailedCompletion
                ext:Hazard
                ext:SuccessfulCompletion
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:GatewayDirectionConverging
                ext:GatewayDirectionDiverging
                ext:GatewayDirectionMixed
                ext:GatewayDirectionUnspecified
              )
] .


[ rdf:type owl:AllDisjointClasses ;
  owl:members ( ext:SequenceFlowConditional
                ext:SequenceFlowDefault
                ext:SequenceFlowNormal
              )
] .


###  Generated by the OWL API (version 4.2.8.20170104-2310) https://github.com/owlcs/owlapi
